
Test.elf:     file format elf32-littlenios2
Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000375c memsz 0x0000375c flags r-x
    LOAD off    0x00005000 vaddr 0x40000000 paddr 0x0000377c align 2**12
         filesz 0x00001940 memsz 0x00001a60 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003534  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  40000000  0000377c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000181c  40000124  000038a0  00005124  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  40001940  000050bc  00006940  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000050bc  000050bc  00006940  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  00006940  2**0
                  CONTENTS
  8 .ARM_A9_HPS_axi_sdram 00000000  40001a60  40001a60  00006940  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00006940  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000638  00000000  00000000  00006968  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00008d62  00000000  00000000  00006fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002eb5  00000000  00000000  0000fd02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003234  00000000  00000000  00012bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001008  00000000  00000000  00015dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000021ae  00000000  00000000  00016df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000836  00000000  00000000  00018fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000020  00000000  00000000  000197d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000188  00000000  00000000  000197f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0001bbf6  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  0001bbf9  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0001bbfe  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0001bbff  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0001bc00  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0001bc04  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0001bc08  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0001bc0c  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0001bc15  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0001bc1e  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000f  00000000  00000000  0001bc27  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000039  00000000  00000000  0001bc36  2**0
                  CONTENTS, READONLY
 31 .jdi          0001472a  00000000  00000000  0001bc6f  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0043a894  00000000  00000000  00030399  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
40000124 l    d  .rwdata	00000000 .rwdata
40001940 l    d  .bss	00000000 .bss
000050bc l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
40001a60 l    d  .ARM_A9_HPS_axi_sdram	00000000 .ARM_A9_HPS_axi_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Test_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00000494 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000005fc l     F .text	00000034 alt_dev_reg
40000124 l     O .rwdata	00001060 JTAG_UART
40001184 l     O .rwdata	0000002c ADC
400011b0 l     O .rwdata	00000030 AV_Config
400011e0 l     O .rwdata	00000030 Audio_Subsystem_Audio
40001210 l     O .rwdata	0000002c IrDA
4000123c l     O .rwdata	00000038 PS2_Port
40001274 l     O .rwdata	00000038 PS2_Port_Dual
400012ac l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
400012f4 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000bd8 l     F .text	00000210 altera_avalon_jtag_uart_irq
00000de8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001420 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002358 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002484 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000024b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002714 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000029d4 l     F .text	0000003c alt_get_errno
00002a10 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
400014f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
40001958 g     O .bss	00000004 alt_instruction_exception_handler
00000580 g     F .text	0000007c alt_main
40001960 g     O .bss	00000100 alt_irq
00001ae8 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
000038a0 g       *ABS*	00000000 __flash_rwdata_start
000020d4 g     F .text	000000fc alt_up_char_buffer_string
00001900 g     F .text	00000034 read_CE_bit
00001c88 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00002008 g     F .text	000000cc alt_up_char_buffer_draw
00002e30 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
4000195c g     O .bss	00000004 errno
40001944 g     O .bss	00000004 alt_argv
40009914 g       *ABS*	00000000 _gp
40001370 g     O .rwdata	00000180 alt_fd_list
00002650 g     F .text	00000090 alt_find_dev
000031f4 g     F .text	00000148 memcpy
000021d0 g     F .text	0000005c alt_up_char_buffer_clear
000027d8 g     F .text	0000007c alt_io_redirect
0000377c g       *ABS*	00000000 __DTOR_END__
000017d0 g     F .text	00000090 alt_up_irda_write_fd
00003090 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000015cc g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00000fe0 g     F .text	0000021c altera_avalon_jtag_uart_read
0000156c g     F .text	00000060 alt_up_irda_disable_read_interrupt
00003000 g     F .text	00000090 alt_icache_flush
40001924 g     O .rwdata	00000004 alt_max_fd
00001934 g     F .text	00000030 read_num_bytes_available
00002854 g     F .text	00000180 alt_irq_register
0000189c g     F .text	00000034 read_RI_bit
40001938 g     O .rwdata	00000004 _global_impure_ptr
40001a60 g       *ABS*	00000000 __bss_end
00002d28 g     F .text	00000108 alt_tick
00001998 g     F .text	0000002c read_data_byte
00002c8c g     F .text	0000009c alt_alarm_stop
000018d0 g     F .text	00000030 read_RE_bit
4000194c g     O .bss	00000004 alt_irq_active
0000160c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
40001348 g     O .rwdata	00000028 alt_dev_null
00001b48 g     F .text	00000074 alt_up_ps2_write_data_byte
00002464 g     F .text	00000020 alt_dcache_flush_all
40001940 g       *ABS*	00000000 __ram_rwdata_end
4000191c g     O .rwdata	00000008 alt_dev_list
40000124 g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
40000000 g       *ABS*	00000000 __alt_mem_ARM_A9_HPS_axi_sdram
40001a60 g       *ABS*	00000000 end
00001e78 g     F .text	00000098 alt_up_ps2_write_fd
00001648 g     F .text	00000044 alt_up_irda_check_parity
00001f4c g     F .text	00000080 alt_up_char_buffer_init
00000b24 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000377c g       *ABS*	00000000 __CTOR_LIST__
80000000 g       *ABS*	00000000 __alt_stack_pointer
0000149c g     F .text	00000074 alt_avalon_timer_sc_init
000011fc g     F .text	00000224 altera_avalon_jtag_uart_write
000035c8 g     F .text	00000180 __call_exitprocs
00000248 g     F .text	0000003c _start
40001950 g     O .bss	00000004 _alt_tick_rate
40001954 g     O .bss	00000004 _alt_nticks
00000668 g     F .text	00000358 alt_sys_init
000034b0 g     F .text	00000118 __register_exitproc
00001d94 g     F .text	00000058 alt_up_ps2_clear_fifo
00000e88 g     F .text	00000068 altera_avalon_jtag_uart_close
40000124 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
000009c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00002f5c g     F .text	000000a4 alt_get_fd
00003178 g     F .text	0000007c memcmp
00000a80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
40001a60 g       *ABS*	00000000 __alt_stack_base
00000ad0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001510 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002e54 g     F .text	00000108 alt_find_file
000024ec g     F .text	000000a4 alt_dev_llist_insert
40001940 g       *ABS*	00000000 __bss_start
000003b0 g     F .text	000000e4 main
40001948 g     O .bss	00000004 alt_envp
00001fcc g     F .text	0000003c alt_up_char_buffer_open_dev
00000a20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000284 g     F .text	0000005c write_pixel
00001d24 g     F .text	00000070 alt_up_ps2_read_data_byte
40001928 g     O .rwdata	00000004 alt_errno
0000168c g     F .text	00000040 alt_up_irda_write_data
00001f10 g     F .text	0000003c alt_up_ps2_open_dev
00001a8c g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000377c g       *ABS*	00000000 __CTOR_END__
0000333c g     F .text	000000dc strcmp
0000377c g       *ABS*	00000000 __flash_rodata_start
0000377c g       *ABS*	00000000 __DTOR_LIST__
00000630 g     F .text	00000038 alt_irq_init
00002c28 g     F .text	00000064 alt_release_fd
00001964 g     F .text	00000034 read_data_valid
00001c24 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000312c g     F .text	00000014 atexit
4000193c g     O .rwdata	00000004 _impure_ptr
40001940 g     O .bss	00000004 alt_argc
000025f0 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
40001914 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
40001940 g       *ABS*	00000000 _edata
40001a60 g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00000ef0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00003140 g     F .text	00000038 exit
000016cc g     F .text	00000074 alt_up_irda_read_data
000019c4 g     F .text	000000c8 alt_up_ps2_init
80000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001860 g     F .text	0000003c alt_up_irda_open_dev
00003748 g     F .text	00000034 _exit
0000222c g     F .text	0000012c alt_alarm_start
00001bbc g     F .text	00000068 alt_up_ps2_wait_for_ack
00003418 g     F .text	00000098 strlen
00002ad4 g     F .text	00000154 open
000026e0 g     F .text	00000034 alt_icache_flush_all
00000358 g     F .text	00000058 write_char
4000192c g     O .rwdata	00000004 alt_priority_mask
00001dec g     F .text	0000008c alt_up_ps2_read_fd
000002e0 g     F .text	00000078 clear_screen
00001740 g     F .text	00000090 alt_up_irda_read_fd
40001930 g     O .rwdata	00000008 alt_alarm_list
00002590 g     F .text	00000060 _do_ctors
00002394 g     F .text	000000d0 close
000004fc g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0x80000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00900034 	movhi	r2,16384
 140:	10865804 	addi	r2,r2,6496
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00900034 	movhi	r2,16384
 158:	10865804 	addi	r2,r2,6496
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_data_end+0x8000012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_data_end+0x80000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a01117 	ldw	r2,-32700(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a01117 	ldw	r2,-32700(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
     254:	d6a64514 	ori	gp,gp,39188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
     25c:	10865014 	ori	r2,r2,6464

    movhi r3, %hi(__bss_end)
     260:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
     264:	18c69814 	ori	r3,r3,6752

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_data_end+0x8000026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00004fc0 	call	4fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00005800 	call	580 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_data_end+0x80000280>

00000284 <write_pixel>:
/* set a single pixel on the screen at x,y
 * x in [0,319], y in [0,239], and colour in [0,65535]
 */
void write_pixel(int x, int y, short colour) {
     284:	defffb04 	addi	sp,sp,-20
     288:	df000415 	stw	fp,16(sp)
     28c:	df000404 	addi	fp,sp,16
     290:	e13ffd15 	stw	r4,-12(fp)
     294:	e17ffe15 	stw	r5,-8(fp)
     298:	3005883a 	mov	r2,r6
     29c:	e0bfff0d 	sth	r2,-4(fp)
  volatile short *vga_addr=(volatile short*)(0x08000000 + (y<<10) + (x<<1));
     2a0:	e0bffe17 	ldw	r2,-8(fp)
     2a4:	100692ba 	slli	r3,r2,10
     2a8:	00820034 	movhi	r2,2048
     2ac:	1887883a 	add	r3,r3,r2
     2b0:	e0bffd17 	ldw	r2,-12(fp)
     2b4:	1085883a 	add	r2,r2,r2
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	e0bffc15 	stw	r2,-16(fp)
  *vga_addr=colour;
     2c0:	e0bffc17 	ldw	r2,-16(fp)
     2c4:	e0ffff0b 	ldhu	r3,-4(fp)
     2c8:	10c0000d 	sth	r3,0(r2)
}
     2cc:	0001883a 	nop
     2d0:	e037883a 	mov	sp,fp
     2d4:	df000017 	ldw	fp,0(sp)
     2d8:	dec00104 	addi	sp,sp,4
     2dc:	f800283a 	ret

000002e0 <clear_screen>:

/* use write_pixel to set entire screen to black (does not clear the character buffer) */
void clear_screen() {
     2e0:	defffc04 	addi	sp,sp,-16
     2e4:	dfc00315 	stw	ra,12(sp)
     2e8:	df000215 	stw	fp,8(sp)
     2ec:	df000204 	addi	fp,sp,8
  int x, y;
  for (x = 0; x < 320; x++) {
     2f0:	e03ffe15 	stw	zero,-8(fp)
     2f4:	00000f06 	br	334 <clear_screen+0x54>
    for (y = 0; y < 240; y++) {
     2f8:	e03fff15 	stw	zero,-4(fp)
     2fc:	00000706 	br	31c <clear_screen+0x3c>
	  write_pixel(x,y,0);
     300:	000d883a 	mov	r6,zero
     304:	e17fff17 	ldw	r5,-4(fp)
     308:	e13ffe17 	ldw	r4,-8(fp)
     30c:	00002840 	call	284 <write_pixel>

/* use write_pixel to set entire screen to black (does not clear the character buffer) */
void clear_screen() {
  int x, y;
  for (x = 0; x < 320; x++) {
    for (y = 0; y < 240; y++) {
     310:	e0bfff17 	ldw	r2,-4(fp)
     314:	10800044 	addi	r2,r2,1
     318:	e0bfff15 	stw	r2,-4(fp)
     31c:	e0bfff17 	ldw	r2,-4(fp)
     320:	10803c10 	cmplti	r2,r2,240
     324:	103ff61e 	bne	r2,zero,300 <__alt_data_end+0x80000300>
}

/* use write_pixel to set entire screen to black (does not clear the character buffer) */
void clear_screen() {
  int x, y;
  for (x = 0; x < 320; x++) {
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	10800044 	addi	r2,r2,1
     330:	e0bffe15 	stw	r2,-8(fp)
     334:	e0bffe17 	ldw	r2,-8(fp)
     338:	10805010 	cmplti	r2,r2,320
     33c:	103fee1e 	bne	r2,zero,2f8 <__alt_data_end+0x800002f8>
    for (y = 0; y < 240; y++) {
	  write_pixel(x,y,0);
	}
  }
}
     340:	0001883a 	nop
     344:	e037883a 	mov	sp,fp
     348:	dfc00117 	ldw	ra,4(sp)
     34c:	df000017 	ldw	fp,0(sp)
     350:	dec00204 	addi	sp,sp,8
     354:	f800283a 	ret

00000358 <write_char>:

/* write a single character to the character buffer at x,y
 * x in [0,79], y in [0,59]
 */
void write_char(int x, int y, char c) {
     358:	defffb04 	addi	sp,sp,-20
     35c:	df000415 	stw	fp,16(sp)
     360:	df000404 	addi	fp,sp,16
     364:	e13ffd15 	stw	r4,-12(fp)
     368:	e17ffe15 	stw	r5,-8(fp)
     36c:	3005883a 	mov	r2,r6
     370:	e0bfff05 	stb	r2,-4(fp)
  // VGA character buffer
  volatile char * character_buffer = (char *) (0x09000000 + (y<<7) + x);
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	100691fa 	slli	r3,r2,7
     37c:	00824034 	movhi	r2,2304
     380:	1887883a 	add	r3,r3,r2
     384:	e0bffd17 	ldw	r2,-12(fp)
     388:	1885883a 	add	r2,r3,r2
     38c:	e0bffc15 	stw	r2,-16(fp)
  *character_buffer = c;
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	e0ffff03 	ldbu	r3,-4(fp)
     398:	10c00005 	stb	r3,0(r2)
}
     39c:	0001883a 	nop
     3a0:	e037883a 	mov	sp,fp
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00104 	addi	sp,sp,4
     3ac:	f800283a 	ret

000003b0 <main>:

int main () {
     3b0:	defffc04 	addi	sp,sp,-16
     3b4:	dfc00315 	stw	ra,12(sp)
     3b8:	df000215 	stw	fp,8(sp)
     3bc:	df000204 	addi	fp,sp,8

   clear_screen();
     3c0:	00002e00 	call	2e0 <clear_screen>
   int x;

   for (x=0;x<320;x++)
     3c4:	e03ffe15 	stw	zero,-8(fp)
     3c8:	00000e06 	br	404 <main+0x54>
   {
      // Draw a straight line in red across the screen centre
      write_pixel(x, 59, 0xf800);
     3cc:	01be0004 	movi	r6,-2048
     3d0:	01400ec4 	movi	r5,59
     3d4:	e13ffe17 	ldw	r4,-8(fp)
     3d8:	00002840 	call	284 <write_pixel>
      // Draw a "diagonal" line in green
      if (x<240)
     3dc:	e0bffe17 	ldw	r2,-8(fp)
     3e0:	10803c08 	cmpgei	r2,r2,240
     3e4:	1000041e 	bne	r2,zero,3f8 <main+0x48>
         write_pixel(x, x, 0x07e0);
     3e8:	0181f804 	movi	r6,2016
     3ec:	e17ffe17 	ldw	r5,-8(fp)
     3f0:	e13ffe17 	ldw	r4,-8(fp)
     3f4:	00002840 	call	284 <write_pixel>
int main () {

   clear_screen();
   int x;

   for (x=0;x<320;x++)
     3f8:	e0bffe17 	ldw	r2,-8(fp)
     3fc:	10800044 	addi	r2,r2,1
     400:	e0bffe15 	stw	r2,-8(fp)
     404:	e0bffe17 	ldw	r2,-8(fp)
     408:	10805010 	cmplti	r2,r2,320
     40c:	103fef1e 	bne	r2,zero,3cc <__alt_data_end+0x800003cc>
      if (x<240)
         write_pixel(x, x, 0x07e0);
   }

   // Write Hello, world!
   char* hw = "Hello, world!";
     410:	00900034 	movhi	r2,16384
     414:	10800004 	addi	r2,r2,0
     418:	e0bfff15 	stw	r2,-4(fp)
   x = 15;
     41c:	008003c4 	movi	r2,15
     420:	e0bffe15 	stw	r2,-8(fp)
   while (*hw) {
     424:	00000f06 	br	464 <main+0xb4>
     write_char(x, 10, *hw);
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800003 	ldbu	r2,0(r2)
     430:	10803fcc 	andi	r2,r2,255
     434:	1080201c 	xori	r2,r2,128
     438:	10bfe004 	addi	r2,r2,-128
     43c:	100d883a 	mov	r6,r2
     440:	01400284 	movi	r5,10
     444:	e13ffe17 	ldw	r4,-8(fp)
     448:	00003580 	call	358 <write_char>
	 x++;
     44c:	e0bffe17 	ldw	r2,-8(fp)
     450:	10800044 	addi	r2,r2,1
     454:	e0bffe15 	stw	r2,-8(fp)
	 hw++;
     458:	e0bfff17 	ldw	r2,-4(fp)
     45c:	10800044 	addi	r2,r2,1
     460:	e0bfff15 	stw	r2,-4(fp)
   }

   // Write Hello, world!
   char* hw = "Hello, world!";
   x = 15;
   while (*hw) {
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	10800003 	ldbu	r2,0(r2)
     46c:	10803fcc 	andi	r2,r2,255
     470:	1080201c 	xori	r2,r2,128
     474:	10bfe004 	addi	r2,r2,-128
     478:	103feb1e 	bne	r2,zero,428 <__alt_data_end+0x80000428>
     write_char(x, 10, *hw);
	 x++;
	 hw++;
   }
   return 0;
     47c:	0005883a 	mov	r2,zero
}
     480:	e037883a 	mov	sp,fp
     484:	dfc00117 	ldw	ra,4(sp)
     488:	df000017 	ldw	fp,0(sp)
     48c:	dec00204 	addi	sp,sp,8
     490:	f800283a 	ret

00000494 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     494:	defffc04 	addi	sp,sp,-16
     498:	df000315 	stw	fp,12(sp)
     49c:	df000304 	addi	fp,sp,12
     4a0:	e13ffd15 	stw	r4,-12(fp)
     4a4:	e17ffe15 	stw	r5,-8(fp)
     4a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     4ac:	e0fffe17 	ldw	r3,-8(fp)
     4b0:	e0bffd17 	ldw	r2,-12(fp)
     4b4:	18800c26 	beq	r3,r2,4e8 <alt_load_section+0x54>
  {
    while( to != end )
     4b8:	00000806 	br	4dc <alt_load_section+0x48>
    {
      *to++ = *from++;
     4bc:	e0bffe17 	ldw	r2,-8(fp)
     4c0:	10c00104 	addi	r3,r2,4
     4c4:	e0fffe15 	stw	r3,-8(fp)
     4c8:	e0fffd17 	ldw	r3,-12(fp)
     4cc:	19000104 	addi	r4,r3,4
     4d0:	e13ffd15 	stw	r4,-12(fp)
     4d4:	18c00017 	ldw	r3,0(r3)
     4d8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     4dc:	e0fffe17 	ldw	r3,-8(fp)
     4e0:	e0bfff17 	ldw	r2,-4(fp)
     4e4:	18bff51e 	bne	r3,r2,4bc <__alt_data_end+0x800004bc>
    {
      *to++ = *from++;
    }
  }
}
     4e8:	0001883a 	nop
     4ec:	e037883a 	mov	sp,fp
     4f0:	df000017 	ldw	fp,0(sp)
     4f4:	dec00104 	addi	sp,sp,4
     4f8:	f800283a 	ret

000004fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     4fc:	defffe04 	addi	sp,sp,-8
     500:	dfc00115 	stw	ra,4(sp)
     504:	df000015 	stw	fp,0(sp)
     508:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     50c:	01900034 	movhi	r6,16384
     510:	31865004 	addi	r6,r6,6464
     514:	01500034 	movhi	r5,16384
     518:	29404904 	addi	r5,r5,292
     51c:	01000034 	movhi	r4,0
     520:	210e2804 	addi	r4,r4,14496
     524:	00004940 	call	494 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     528:	01800034 	movhi	r6,0
     52c:	31809204 	addi	r6,r6,584
     530:	01400034 	movhi	r5,0
     534:	29400804 	addi	r5,r5,32
     538:	01000034 	movhi	r4,0
     53c:	21000804 	addi	r4,r4,32
     540:	00004940 	call	494 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     544:	01900034 	movhi	r6,16384
     548:	31804904 	addi	r6,r6,292
     54c:	01500034 	movhi	r5,16384
     550:	29400004 	addi	r5,r5,0
     554:	01000034 	movhi	r4,0
     558:	210ddf04 	addi	r4,r4,14204
     55c:	00004940 	call	494 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     560:	00024640 	call	2464 <alt_dcache_flush_all>
  alt_icache_flush_all();
     564:	00026e00 	call	26e0 <alt_icache_flush_all>
}
     568:	0001883a 	nop
     56c:	e037883a 	mov	sp,fp
     570:	dfc00117 	ldw	ra,4(sp)
     574:	df000017 	ldw	fp,0(sp)
     578:	dec00204 	addi	sp,sp,8
     57c:	f800283a 	ret

00000580 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     580:	defffd04 	addi	sp,sp,-12
     584:	dfc00215 	stw	ra,8(sp)
     588:	df000115 	stw	fp,4(sp)
     58c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     590:	0009883a 	mov	r4,zero
     594:	00006300 	call	630 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     598:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     59c:	00006680 	call	668 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     5a0:	01900034 	movhi	r6,16384
     5a4:	31800404 	addi	r6,r6,16
     5a8:	01500034 	movhi	r5,16384
     5ac:	29400404 	addi	r5,r5,16
     5b0:	01100034 	movhi	r4,16384
     5b4:	21000404 	addi	r4,r4,16
     5b8:	00027d80 	call	27d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     5bc:	00025900 	call	2590 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     5c0:	01000034 	movhi	r4,0
     5c4:	21097c04 	addi	r4,r4,9712
     5c8:	000312c0 	call	312c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     5cc:	d0a00b17 	ldw	r2,-32724(gp)
     5d0:	d0e00c17 	ldw	r3,-32720(gp)
     5d4:	d1200d17 	ldw	r4,-32716(gp)
     5d8:	200d883a 	mov	r6,r4
     5dc:	180b883a 	mov	r5,r3
     5e0:	1009883a 	mov	r4,r2
     5e4:	00003b00 	call	3b0 <main>
     5e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     5ec:	01000044 	movi	r4,1
     5f0:	00023940 	call	2394 <close>
  exit (result);
     5f4:	e13fff17 	ldw	r4,-4(fp)
     5f8:	00031400 	call	3140 <exit>

000005fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     5fc:	defffd04 	addi	sp,sp,-12
     600:	dfc00215 	stw	ra,8(sp)
     604:	df000115 	stw	fp,4(sp)
     608:	df000104 	addi	fp,sp,4
     60c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     610:	d1600204 	addi	r5,gp,-32760
     614:	e13fff17 	ldw	r4,-4(fp)
     618:	00024ec0 	call	24ec <alt_dev_llist_insert>
}
     61c:	e037883a 	mov	sp,fp
     620:	dfc00117 	ldw	ra,4(sp)
     624:	df000017 	ldw	fp,0(sp)
     628:	dec00204 	addi	sp,sp,8
     62c:	f800283a 	ret

00000630 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     630:	defffd04 	addi	sp,sp,-12
     634:	dfc00215 	stw	ra,8(sp)
     638:	df000115 	stw	fp,4(sp)
     63c:	df000104 	addi	fp,sp,4
     640:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     644:	0002e300 	call	2e30 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     648:	00800044 	movi	r2,1
     64c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     650:	0001883a 	nop
     654:	e037883a 	mov	sp,fp
     658:	dfc00117 	ldw	ra,4(sp)
     65c:	df000017 	ldw	fp,0(sp)
     660:	dec00204 	addi	sp,sp,8
     664:	f800283a 	ret

00000668 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     668:	defffd04 	addi	sp,sp,-12
     66c:	dfc00215 	stw	ra,8(sp)
     670:	df000115 	stw	fp,4(sp)
     674:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     678:	01c00204 	movi	r7,8
     67c:	000d883a 	mov	r6,zero
     680:	000b883a 	mov	r5,zero
     684:	013fc834 	movhi	r4,65312
     688:	21080004 	addi	r4,r4,8192
     68c:	000149c0 	call	149c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     690:	01800204 	movi	r6,8
     694:	000b883a 	mov	r5,zero
     698:	01100034 	movhi	r4,16384
     69c:	21005304 	addi	r4,r4,332
     6a0:	0000b240 	call	b24 <altera_avalon_jtag_uart_init>
     6a4:	01100034 	movhi	r4,16384
     6a8:	21004904 	addi	r4,r4,292
     6ac:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
     6b0:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC, ADC);
     6b4:	01100034 	movhi	r4,16384
     6b8:	21046104 	addi	r4,r4,4484
     6bc:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
     6c0:	01100034 	movhi	r4,16384
     6c4:	21046c04 	addi	r4,r4,4528
     6c8:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
     6cc:	01100034 	movhi	r4,16384
     6d0:	21047804 	addi	r4,r4,4576
     6d4:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
     6d8:	01100034 	movhi	r4,16384
     6dc:	21048404 	addi	r4,r4,4624
     6e0:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     6e4:	01100034 	movhi	r4,16384
     6e8:	21048f04 	addi	r4,r4,4668
     6ec:	00019c40 	call	19c4 <alt_up_ps2_init>
     6f0:	01100034 	movhi	r4,16384
     6f4:	21048f04 	addi	r4,r4,4668
     6f8:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
     6fc:	01100034 	movhi	r4,16384
     700:	21049d04 	addi	r4,r4,4724
     704:	00019c40 	call	19c4 <alt_up_ps2_init>
     708:	01100034 	movhi	r4,16384
     70c:	21049d04 	addi	r4,r4,4724
     710:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
     714:	00900034 	movhi	r2,16384
     718:	1084ab04 	addi	r2,r2,4780
     71c:	10800a17 	ldw	r2,40(r2)
     720:	10800104 	addi	r2,r2,4
     724:	10800017 	ldw	r2,0(r2)
     728:	10ffffcc 	andi	r3,r2,65535
     72c:	00900034 	movhi	r2,16384
     730:	1084ab04 	addi	r2,r2,4780
     734:	10c00c15 	stw	r3,48(r2)
     738:	00900034 	movhi	r2,16384
     73c:	1084ab04 	addi	r2,r2,4780
     740:	10800a17 	ldw	r2,40(r2)
     744:	10800104 	addi	r2,r2,4
     748:	10800017 	ldw	r2,0(r2)
     74c:	1006d43a 	srli	r3,r2,16
     750:	00900034 	movhi	r2,16384
     754:	1084ab04 	addi	r2,r2,4780
     758:	10c00d15 	stw	r3,52(r2)
     75c:	00900034 	movhi	r2,16384
     760:	1084ab04 	addi	r2,r2,4780
     764:	10800c17 	ldw	r2,48(r2)
     768:	10801068 	cmpgeui	r2,r2,65
     76c:	1000081e 	bne	r2,zero,790 <alt_sys_init+0x128>
     770:	00900034 	movhi	r2,16384
     774:	1084ab04 	addi	r2,r2,4780
     778:	00c00fc4 	movi	r3,63
     77c:	10c00f15 	stw	r3,60(r2)
     780:	00900034 	movhi	r2,16384
     784:	1084ab04 	addi	r2,r2,4780
     788:	00c00184 	movi	r3,6
     78c:	10c01015 	stw	r3,64(r2)
     790:	00900034 	movhi	r2,16384
     794:	1084ab04 	addi	r2,r2,4780
     798:	10800d17 	ldw	r2,52(r2)
     79c:	10800868 	cmpgeui	r2,r2,33
     7a0:	1000041e 	bne	r2,zero,7b4 <alt_sys_init+0x14c>
     7a4:	00900034 	movhi	r2,16384
     7a8:	1084ab04 	addi	r2,r2,4780
     7ac:	00c007c4 	movi	r3,31
     7b0:	10c01115 	stw	r3,68(r2)
     7b4:	01100034 	movhi	r4,16384
     7b8:	2104ab04 	addi	r4,r4,4780
     7bc:	0001f4c0 	call	1f4c <alt_up_char_buffer_init>
     7c0:	01100034 	movhi	r4,16384
     7c4:	2104ab04 	addi	r4,r4,4780
     7c8:	00005fc0 	call	5fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     7cc:	00900034 	movhi	r2,16384
     7d0:	1084bd04 	addi	r2,r2,4852
     7d4:	10800a17 	ldw	r2,40(r2)
     7d8:	10800017 	ldw	r2,0(r2)
     7dc:	1007883a 	mov	r3,r2
     7e0:	00900034 	movhi	r2,16384
     7e4:	1084bd04 	addi	r2,r2,4852
     7e8:	10c00b15 	stw	r3,44(r2)
     7ec:	00900034 	movhi	r2,16384
     7f0:	1084bd04 	addi	r2,r2,4852
     7f4:	10800a17 	ldw	r2,40(r2)
     7f8:	10800104 	addi	r2,r2,4
     7fc:	10800017 	ldw	r2,0(r2)
     800:	1007883a 	mov	r3,r2
     804:	00900034 	movhi	r2,16384
     808:	1084bd04 	addi	r2,r2,4852
     80c:	10c00c15 	stw	r3,48(r2)
     810:	00900034 	movhi	r2,16384
     814:	1084bd04 	addi	r2,r2,4852
     818:	10800a17 	ldw	r2,40(r2)
     81c:	10800204 	addi	r2,r2,8
     820:	10800017 	ldw	r2,0(r2)
     824:	10ffffcc 	andi	r3,r2,65535
     828:	00900034 	movhi	r2,16384
     82c:	1084bd04 	addi	r2,r2,4852
     830:	10c00f15 	stw	r3,60(r2)
     834:	00900034 	movhi	r2,16384
     838:	1084bd04 	addi	r2,r2,4852
     83c:	10800a17 	ldw	r2,40(r2)
     840:	10800204 	addi	r2,r2,8
     844:	10800017 	ldw	r2,0(r2)
     848:	1006d43a 	srli	r3,r2,16
     84c:	00900034 	movhi	r2,16384
     850:	1084bd04 	addi	r2,r2,4852
     854:	10c01015 	stw	r3,64(r2)
     858:	00900034 	movhi	r2,16384
     85c:	1084bd04 	addi	r2,r2,4852
     860:	10800a17 	ldw	r2,40(r2)
     864:	10800304 	addi	r2,r2,12
     868:	10800017 	ldw	r2,0(r2)
     86c:	1005d07a 	srai	r2,r2,1
     870:	10c0004c 	andi	r3,r2,1
     874:	00900034 	movhi	r2,16384
     878:	1084bd04 	addi	r2,r2,4852
     87c:	10c00d15 	stw	r3,52(r2)
     880:	00900034 	movhi	r2,16384
     884:	1084bd04 	addi	r2,r2,4852
     888:	10800a17 	ldw	r2,40(r2)
     88c:	10800304 	addi	r2,r2,12
     890:	10800017 	ldw	r2,0(r2)
     894:	1005d13a 	srai	r2,r2,4
     898:	10c003cc 	andi	r3,r2,15
     89c:	00900034 	movhi	r2,16384
     8a0:	1084bd04 	addi	r2,r2,4852
     8a4:	10c00e15 	stw	r3,56(r2)
     8a8:	00900034 	movhi	r2,16384
     8ac:	1084bd04 	addi	r2,r2,4852
     8b0:	10800a17 	ldw	r2,40(r2)
     8b4:	10800304 	addi	r2,r2,12
     8b8:	10800017 	ldw	r2,0(r2)
     8bc:	1005d43a 	srai	r2,r2,16
     8c0:	e0bfff05 	stb	r2,-4(fp)
     8c4:	00900034 	movhi	r2,16384
     8c8:	1084bd04 	addi	r2,r2,4852
     8cc:	10800a17 	ldw	r2,40(r2)
     8d0:	10800304 	addi	r2,r2,12
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	1004d63a 	srli	r2,r2,24
     8dc:	e0bfff45 	stb	r2,-3(fp)
     8e0:	00900034 	movhi	r2,16384
     8e4:	1084bd04 	addi	r2,r2,4852
     8e8:	10800e17 	ldw	r2,56(r2)
     8ec:	10800058 	cmpnei	r2,r2,1
     8f0:	1000041e 	bne	r2,zero,904 <alt_sys_init+0x29c>
     8f4:	00900034 	movhi	r2,16384
     8f8:	1084bd04 	addi	r2,r2,4852
     8fc:	10001115 	stw	zero,68(r2)
     900:	00000e06 	br	93c <alt_sys_init+0x2d4>
     904:	00900034 	movhi	r2,16384
     908:	1084bd04 	addi	r2,r2,4852
     90c:	10800e17 	ldw	r2,56(r2)
     910:	10800098 	cmpnei	r2,r2,2
     914:	1000051e 	bne	r2,zero,92c <alt_sys_init+0x2c4>
     918:	00900034 	movhi	r2,16384
     91c:	1084bd04 	addi	r2,r2,4852
     920:	00c00044 	movi	r3,1
     924:	10c01115 	stw	r3,68(r2)
     928:	00000406 	br	93c <alt_sys_init+0x2d4>
     92c:	00900034 	movhi	r2,16384
     930:	1084bd04 	addi	r2,r2,4852
     934:	00c00084 	movi	r3,2
     938:	10c01115 	stw	r3,68(r2)
     93c:	e0bfff03 	ldbu	r2,-4(fp)
     940:	00c00804 	movi	r3,32
     944:	1885c83a 	sub	r2,r3,r2
     948:	00ffffc4 	movi	r3,-1
     94c:	1886d83a 	srl	r3,r3,r2
     950:	00900034 	movhi	r2,16384
     954:	1084bd04 	addi	r2,r2,4852
     958:	10c01215 	stw	r3,72(r2)
     95c:	e0ffff03 	ldbu	r3,-4(fp)
     960:	00900034 	movhi	r2,16384
     964:	1084bd04 	addi	r2,r2,4852
     968:	10801117 	ldw	r2,68(r2)
     96c:	1887883a 	add	r3,r3,r2
     970:	00900034 	movhi	r2,16384
     974:	1084bd04 	addi	r2,r2,4852
     978:	10c01315 	stw	r3,76(r2)
     97c:	e0bfff43 	ldbu	r2,-3(fp)
     980:	00c00804 	movi	r3,32
     984:	1885c83a 	sub	r2,r3,r2
     988:	00ffffc4 	movi	r3,-1
     98c:	1886d83a 	srl	r3,r3,r2
     990:	00900034 	movhi	r2,16384
     994:	1084bd04 	addi	r2,r2,4852
     998:	10c01415 	stw	r3,80(r2)
     99c:	01100034 	movhi	r4,16384
     9a0:	2104bd04 	addi	r4,r4,4852
     9a4:	00005fc0 	call	5fc <alt_dev_reg>
}
     9a8:	0001883a 	nop
     9ac:	e037883a 	mov	sp,fp
     9b0:	dfc00117 	ldw	ra,4(sp)
     9b4:	df000017 	ldw	fp,0(sp)
     9b8:	dec00204 	addi	sp,sp,8
     9bc:	f800283a 	ret

000009c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     9c0:	defffa04 	addi	sp,sp,-24
     9c4:	dfc00515 	stw	ra,20(sp)
     9c8:	df000415 	stw	fp,16(sp)
     9cc:	df000404 	addi	fp,sp,16
     9d0:	e13ffd15 	stw	r4,-12(fp)
     9d4:	e17ffe15 	stw	r5,-8(fp)
     9d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     9dc:	e0bffd17 	ldw	r2,-12(fp)
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     9e8:	e0bffc17 	ldw	r2,-16(fp)
     9ec:	10c00a04 	addi	r3,r2,40
     9f0:	e0bffd17 	ldw	r2,-12(fp)
     9f4:	10800217 	ldw	r2,8(r2)
     9f8:	100f883a 	mov	r7,r2
     9fc:	e1bfff17 	ldw	r6,-4(fp)
     a00:	e17ffe17 	ldw	r5,-8(fp)
     a04:	1809883a 	mov	r4,r3
     a08:	0000fe00 	call	fe0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     a0c:	e037883a 	mov	sp,fp
     a10:	dfc00117 	ldw	ra,4(sp)
     a14:	df000017 	ldw	fp,0(sp)
     a18:	dec00204 	addi	sp,sp,8
     a1c:	f800283a 	ret

00000a20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     a20:	defffa04 	addi	sp,sp,-24
     a24:	dfc00515 	stw	ra,20(sp)
     a28:	df000415 	stw	fp,16(sp)
     a2c:	df000404 	addi	fp,sp,16
     a30:	e13ffd15 	stw	r4,-12(fp)
     a34:	e17ffe15 	stw	r5,-8(fp)
     a38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     a3c:	e0bffd17 	ldw	r2,-12(fp)
     a40:	10800017 	ldw	r2,0(r2)
     a44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     a48:	e0bffc17 	ldw	r2,-16(fp)
     a4c:	10c00a04 	addi	r3,r2,40
     a50:	e0bffd17 	ldw	r2,-12(fp)
     a54:	10800217 	ldw	r2,8(r2)
     a58:	100f883a 	mov	r7,r2
     a5c:	e1bfff17 	ldw	r6,-4(fp)
     a60:	e17ffe17 	ldw	r5,-8(fp)
     a64:	1809883a 	mov	r4,r3
     a68:	00011fc0 	call	11fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     a6c:	e037883a 	mov	sp,fp
     a70:	dfc00117 	ldw	ra,4(sp)
     a74:	df000017 	ldw	fp,0(sp)
     a78:	dec00204 	addi	sp,sp,8
     a7c:	f800283a 	ret

00000a80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     a80:	defffc04 	addi	sp,sp,-16
     a84:	dfc00315 	stw	ra,12(sp)
     a88:	df000215 	stw	fp,8(sp)
     a8c:	df000204 	addi	fp,sp,8
     a90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     a94:	e0bfff17 	ldw	r2,-4(fp)
     a98:	10800017 	ldw	r2,0(r2)
     a9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     aa0:	e0bffe17 	ldw	r2,-8(fp)
     aa4:	10c00a04 	addi	r3,r2,40
     aa8:	e0bfff17 	ldw	r2,-4(fp)
     aac:	10800217 	ldw	r2,8(r2)
     ab0:	100b883a 	mov	r5,r2
     ab4:	1809883a 	mov	r4,r3
     ab8:	0000e880 	call	e88 <altera_avalon_jtag_uart_close>
}
     abc:	e037883a 	mov	sp,fp
     ac0:	dfc00117 	ldw	ra,4(sp)
     ac4:	df000017 	ldw	fp,0(sp)
     ac8:	dec00204 	addi	sp,sp,8
     acc:	f800283a 	ret

00000ad0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     ad0:	defffa04 	addi	sp,sp,-24
     ad4:	dfc00515 	stw	ra,20(sp)
     ad8:	df000415 	stw	fp,16(sp)
     adc:	df000404 	addi	fp,sp,16
     ae0:	e13ffd15 	stw	r4,-12(fp)
     ae4:	e17ffe15 	stw	r5,-8(fp)
     ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     aec:	e0bffd17 	ldw	r2,-12(fp)
     af0:	10800017 	ldw	r2,0(r2)
     af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     af8:	e0bffc17 	ldw	r2,-16(fp)
     afc:	10800a04 	addi	r2,r2,40
     b00:	e1bfff17 	ldw	r6,-4(fp)
     b04:	e17ffe17 	ldw	r5,-8(fp)
     b08:	1009883a 	mov	r4,r2
     b0c:	0000ef00 	call	ef0 <altera_avalon_jtag_uart_ioctl>
}
     b10:	e037883a 	mov	sp,fp
     b14:	dfc00117 	ldw	ra,4(sp)
     b18:	df000017 	ldw	fp,0(sp)
     b1c:	dec00204 	addi	sp,sp,8
     b20:	f800283a 	ret

00000b24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     b24:	defffb04 	addi	sp,sp,-20
     b28:	dfc00415 	stw	ra,16(sp)
     b2c:	df000315 	stw	fp,12(sp)
     b30:	df000304 	addi	fp,sp,12
     b34:	e13ffd15 	stw	r4,-12(fp)
     b38:	e17ffe15 	stw	r5,-8(fp)
     b3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b40:	e0bffd17 	ldw	r2,-12(fp)
     b44:	00c00044 	movi	r3,1
     b48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     b4c:	e0bffd17 	ldw	r2,-12(fp)
     b50:	10800017 	ldw	r2,0(r2)
     b54:	10800104 	addi	r2,r2,4
     b58:	1007883a 	mov	r3,r2
     b5c:	e0bffd17 	ldw	r2,-12(fp)
     b60:	10800817 	ldw	r2,32(r2)
     b64:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     b68:	e0bfff17 	ldw	r2,-4(fp)
     b6c:	01800034 	movhi	r6,0
     b70:	3182f604 	addi	r6,r6,3032
     b74:	e17ffd17 	ldw	r5,-12(fp)
     b78:	1009883a 	mov	r4,r2
     b7c:	00028540 	call	2854 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     b80:	e0bffd17 	ldw	r2,-12(fp)
     b84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     b88:	e0bffd17 	ldw	r2,-12(fp)
     b8c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     b90:	d0e00f17 	ldw	r3,-32708(gp)
     b94:	e1fffd17 	ldw	r7,-12(fp)
     b98:	01800034 	movhi	r6,0
     b9c:	31837a04 	addi	r6,r6,3560
     ba0:	180b883a 	mov	r5,r3
     ba4:	1009883a 	mov	r4,r2
     ba8:	000222c0 	call	222c <alt_alarm_start>
     bac:	1000040e 	bge	r2,zero,bc0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     bb0:	e0fffd17 	ldw	r3,-12(fp)
     bb4:	00a00034 	movhi	r2,32768
     bb8:	10bfffc4 	addi	r2,r2,-1
     bbc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     bc0:	0001883a 	nop
     bc4:	e037883a 	mov	sp,fp
     bc8:	dfc00117 	ldw	ra,4(sp)
     bcc:	df000017 	ldw	fp,0(sp)
     bd0:	dec00204 	addi	sp,sp,8
     bd4:	f800283a 	ret

00000bd8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     bd8:	defff704 	addi	sp,sp,-36
     bdc:	df000815 	stw	fp,32(sp)
     be0:	df000804 	addi	fp,sp,32
     be4:	e13ffe15 	stw	r4,-8(fp)
     be8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     bec:	e0bffe17 	ldw	r2,-8(fp)
     bf0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
     bf4:	e0bffa17 	ldw	r2,-24(fp)
     bf8:	10800017 	ldw	r2,0(r2)
     bfc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c00:	e0bffb17 	ldw	r2,-20(fp)
     c04:	10800104 	addi	r2,r2,4
     c08:	10800037 	ldwio	r2,0(r2)
     c0c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     c10:	e0bffc17 	ldw	r2,-16(fp)
     c14:	1080c00c 	andi	r2,r2,768
     c18:	10006d26 	beq	r2,zero,dd0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     c1c:	e0bffc17 	ldw	r2,-16(fp)
     c20:	1080400c 	andi	r2,r2,256
     c24:	10003526 	beq	r2,zero,cfc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     c28:	00800074 	movhi	r2,1
     c2c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c30:	e0bffa17 	ldw	r2,-24(fp)
     c34:	10800a17 	ldw	r2,40(r2)
     c38:	10800044 	addi	r2,r2,1
     c3c:	1081ffcc 	andi	r2,r2,2047
     c40:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
     c44:	e0bffa17 	ldw	r2,-24(fp)
     c48:	10c00b17 	ldw	r3,44(r2)
     c4c:	e0bffd17 	ldw	r2,-12(fp)
     c50:	18801526 	beq	r3,r2,ca8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     c54:	e0bffb17 	ldw	r2,-20(fp)
     c58:	10800037 	ldwio	r2,0(r2)
     c5c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     c60:	e0bff817 	ldw	r2,-32(fp)
     c64:	10a0000c 	andi	r2,r2,32768
     c68:	10001126 	beq	r2,zero,cb0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     c6c:	e0bffa17 	ldw	r2,-24(fp)
     c70:	10800a17 	ldw	r2,40(r2)
     c74:	e0fff817 	ldw	r3,-32(fp)
     c78:	1809883a 	mov	r4,r3
     c7c:	e0fffa17 	ldw	r3,-24(fp)
     c80:	1885883a 	add	r2,r3,r2
     c84:	10800e04 	addi	r2,r2,56
     c88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c8c:	e0bffa17 	ldw	r2,-24(fp)
     c90:	10800a17 	ldw	r2,40(r2)
     c94:	10800044 	addi	r2,r2,1
     c98:	10c1ffcc 	andi	r3,r2,2047
     c9c:	e0bffa17 	ldw	r2,-24(fp)
     ca0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     ca4:	003fe206 	br	c30 <__alt_data_end+0x80000c30>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     ca8:	0001883a 	nop
     cac:	00000106 	br	cb4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     cb0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     cb4:	e0bff817 	ldw	r2,-32(fp)
     cb8:	10bfffec 	andhi	r2,r2,65535
     cbc:	10000f26 	beq	r2,zero,cfc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     cc0:	e0bffa17 	ldw	r2,-24(fp)
     cc4:	10c00817 	ldw	r3,32(r2)
     cc8:	00bfff84 	movi	r2,-2
     ccc:	1886703a 	and	r3,r3,r2
     cd0:	e0bffa17 	ldw	r2,-24(fp)
     cd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     cd8:	e0bffb17 	ldw	r2,-20(fp)
     cdc:	10800104 	addi	r2,r2,4
     ce0:	1007883a 	mov	r3,r2
     ce4:	e0bffa17 	ldw	r2,-24(fp)
     ce8:	10800817 	ldw	r2,32(r2)
     cec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     cf0:	e0bffb17 	ldw	r2,-20(fp)
     cf4:	10800104 	addi	r2,r2,4
     cf8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     cfc:	e0bffc17 	ldw	r2,-16(fp)
     d00:	1080800c 	andi	r2,r2,512
     d04:	103fbe26 	beq	r2,zero,c00 <__alt_data_end+0x80000c00>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     d08:	e0bffc17 	ldw	r2,-16(fp)
     d0c:	1004d43a 	srli	r2,r2,16
     d10:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     d14:	00001406 	br	d68 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     d18:	e0bffb17 	ldw	r2,-20(fp)
     d1c:	e0fffa17 	ldw	r3,-24(fp)
     d20:	18c00d17 	ldw	r3,52(r3)
     d24:	e13ffa17 	ldw	r4,-24(fp)
     d28:	20c7883a 	add	r3,r4,r3
     d2c:	18c20e04 	addi	r3,r3,2104
     d30:	18c00003 	ldbu	r3,0(r3)
     d34:	18c03fcc 	andi	r3,r3,255
     d38:	18c0201c 	xori	r3,r3,128
     d3c:	18ffe004 	addi	r3,r3,-128
     d40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     d44:	e0bffa17 	ldw	r2,-24(fp)
     d48:	10800d17 	ldw	r2,52(r2)
     d4c:	10800044 	addi	r2,r2,1
     d50:	10c1ffcc 	andi	r3,r2,2047
     d54:	e0bffa17 	ldw	r2,-24(fp)
     d58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     d5c:	e0bff917 	ldw	r2,-28(fp)
     d60:	10bfffc4 	addi	r2,r2,-1
     d64:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     d68:	e0bff917 	ldw	r2,-28(fp)
     d6c:	10000526 	beq	r2,zero,d84 <altera_avalon_jtag_uart_irq+0x1ac>
     d70:	e0bffa17 	ldw	r2,-24(fp)
     d74:	10c00d17 	ldw	r3,52(r2)
     d78:	e0bffa17 	ldw	r2,-24(fp)
     d7c:	10800c17 	ldw	r2,48(r2)
     d80:	18bfe51e 	bne	r3,r2,d18 <__alt_data_end+0x80000d18>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     d84:	e0bff917 	ldw	r2,-28(fp)
     d88:	103f9d26 	beq	r2,zero,c00 <__alt_data_end+0x80000c00>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     d8c:	e0bffa17 	ldw	r2,-24(fp)
     d90:	10c00817 	ldw	r3,32(r2)
     d94:	00bfff44 	movi	r2,-3
     d98:	1886703a 	and	r3,r3,r2
     d9c:	e0bffa17 	ldw	r2,-24(fp)
     da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     da4:	e0bffa17 	ldw	r2,-24(fp)
     da8:	10800017 	ldw	r2,0(r2)
     dac:	10800104 	addi	r2,r2,4
     db0:	1007883a 	mov	r3,r2
     db4:	e0bffa17 	ldw	r2,-24(fp)
     db8:	10800817 	ldw	r2,32(r2)
     dbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     dc0:	e0bffb17 	ldw	r2,-20(fp)
     dc4:	10800104 	addi	r2,r2,4
     dc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     dcc:	003f8c06 	br	c00 <__alt_data_end+0x80000c00>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     dd0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     dd4:	0001883a 	nop
     dd8:	e037883a 	mov	sp,fp
     ddc:	df000017 	ldw	fp,0(sp)
     de0:	dec00104 	addi	sp,sp,4
     de4:	f800283a 	ret

00000de8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     de8:	defff804 	addi	sp,sp,-32
     dec:	df000715 	stw	fp,28(sp)
     df0:	df000704 	addi	fp,sp,28
     df4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     df8:	e0bffb17 	ldw	r2,-20(fp)
     dfc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     e00:	e0bff917 	ldw	r2,-28(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	10800104 	addi	r2,r2,4
     e0c:	10800037 	ldwio	r2,0(r2)
     e10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     e14:	e0bffa17 	ldw	r2,-24(fp)
     e18:	1081000c 	andi	r2,r2,1024
     e1c:	10000b26 	beq	r2,zero,e4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     e20:	e0bff917 	ldw	r2,-28(fp)
     e24:	10800017 	ldw	r2,0(r2)
     e28:	10800104 	addi	r2,r2,4
     e2c:	1007883a 	mov	r3,r2
     e30:	e0bff917 	ldw	r2,-28(fp)
     e34:	10800817 	ldw	r2,32(r2)
     e38:	10810014 	ori	r2,r2,1024
     e3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     e40:	e0bff917 	ldw	r2,-28(fp)
     e44:	10000915 	stw	zero,36(r2)
     e48:	00000a06 	br	e74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     e4c:	e0bff917 	ldw	r2,-28(fp)
     e50:	10c00917 	ldw	r3,36(r2)
     e54:	00a00034 	movhi	r2,32768
     e58:	10bfff04 	addi	r2,r2,-4
     e5c:	10c00536 	bltu	r2,r3,e74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     e60:	e0bff917 	ldw	r2,-28(fp)
     e64:	10800917 	ldw	r2,36(r2)
     e68:	10c00044 	addi	r3,r2,1
     e6c:	e0bff917 	ldw	r2,-28(fp)
     e70:	10c00915 	stw	r3,36(r2)
     e74:	d0a00f17 	ldw	r2,-32708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     e78:	e037883a 	mov	sp,fp
     e7c:	df000017 	ldw	fp,0(sp)
     e80:	dec00104 	addi	sp,sp,4
     e84:	f800283a 	ret

00000e88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     e88:	defffd04 	addi	sp,sp,-12
     e8c:	df000215 	stw	fp,8(sp)
     e90:	df000204 	addi	fp,sp,8
     e94:	e13ffe15 	stw	r4,-8(fp)
     e98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     e9c:	00000506 	br	eb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     ea0:	e0bfff17 	ldw	r2,-4(fp)
     ea4:	1090000c 	andi	r2,r2,16384
     ea8:	10000226 	beq	r2,zero,eb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     eac:	00bffd44 	movi	r2,-11
     eb0:	00000b06 	br	ee0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     eb4:	e0bffe17 	ldw	r2,-8(fp)
     eb8:	10c00d17 	ldw	r3,52(r2)
     ebc:	e0bffe17 	ldw	r2,-8(fp)
     ec0:	10800c17 	ldw	r2,48(r2)
     ec4:	18800526 	beq	r3,r2,edc <altera_avalon_jtag_uart_close+0x54>
     ec8:	e0bffe17 	ldw	r2,-8(fp)
     ecc:	10c00917 	ldw	r3,36(r2)
     ed0:	e0bffe17 	ldw	r2,-8(fp)
     ed4:	10800117 	ldw	r2,4(r2)
     ed8:	18bff136 	bltu	r3,r2,ea0 <__alt_data_end+0x80000ea0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     edc:	0005883a 	mov	r2,zero
}
     ee0:	e037883a 	mov	sp,fp
     ee4:	df000017 	ldw	fp,0(sp)
     ee8:	dec00104 	addi	sp,sp,4
     eec:	f800283a 	ret

00000ef0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     ef0:	defffa04 	addi	sp,sp,-24
     ef4:	df000515 	stw	fp,20(sp)
     ef8:	df000504 	addi	fp,sp,20
     efc:	e13ffd15 	stw	r4,-12(fp)
     f00:	e17ffe15 	stw	r5,-8(fp)
     f04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     f08:	00bff9c4 	movi	r2,-25
     f0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     f10:	e0bffe17 	ldw	r2,-8(fp)
     f14:	10da8060 	cmpeqi	r3,r2,27137
     f18:	1800031e 	bne	r3,zero,f28 <altera_avalon_jtag_uart_ioctl+0x38>
     f1c:	109a80a0 	cmpeqi	r2,r2,27138
     f20:	1000181e 	bne	r2,zero,f84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
     f24:	00002906 	br	fcc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     f28:	e0bffd17 	ldw	r2,-12(fp)
     f2c:	10c00117 	ldw	r3,4(r2)
     f30:	00a00034 	movhi	r2,32768
     f34:	10bfffc4 	addi	r2,r2,-1
     f38:	18802126 	beq	r3,r2,fc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
     f3c:	e0bfff17 	ldw	r2,-4(fp)
     f40:	10800017 	ldw	r2,0(r2)
     f44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     f48:	e0bffc17 	ldw	r2,-16(fp)
     f4c:	10800090 	cmplti	r2,r2,2
     f50:	1000061e 	bne	r2,zero,f6c <altera_avalon_jtag_uart_ioctl+0x7c>
     f54:	e0fffc17 	ldw	r3,-16(fp)
     f58:	00a00034 	movhi	r2,32768
     f5c:	10bfffc4 	addi	r2,r2,-1
     f60:	18800226 	beq	r3,r2,f6c <altera_avalon_jtag_uart_ioctl+0x7c>
     f64:	e0bffc17 	ldw	r2,-16(fp)
     f68:	00000206 	br	f74 <altera_avalon_jtag_uart_ioctl+0x84>
     f6c:	00a00034 	movhi	r2,32768
     f70:	10bfff84 	addi	r2,r2,-2
     f74:	e0fffd17 	ldw	r3,-12(fp)
     f78:	18800115 	stw	r2,4(r3)
      rc = 0;
     f7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     f80:	00000f06 	br	fc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     f84:	e0bffd17 	ldw	r2,-12(fp)
     f88:	10c00117 	ldw	r3,4(r2)
     f8c:	00a00034 	movhi	r2,32768
     f90:	10bfffc4 	addi	r2,r2,-1
     f94:	18800c26 	beq	r3,r2,fc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     f98:	e0bffd17 	ldw	r2,-12(fp)
     f9c:	10c00917 	ldw	r3,36(r2)
     fa0:	e0bffd17 	ldw	r2,-12(fp)
     fa4:	10800117 	ldw	r2,4(r2)
     fa8:	1885803a 	cmpltu	r2,r3,r2
     fac:	10c03fcc 	andi	r3,r2,255
     fb0:	e0bfff17 	ldw	r2,-4(fp)
     fb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
     fb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     fbc:	00000206 	br	fc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
     fc0:	0001883a 	nop
     fc4:	00000106 	br	fcc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
     fc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
     fcc:	e0bffb17 	ldw	r2,-20(fp)
}
     fd0:	e037883a 	mov	sp,fp
     fd4:	df000017 	ldw	fp,0(sp)
     fd8:	dec00104 	addi	sp,sp,4
     fdc:	f800283a 	ret

00000fe0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     fe0:	defff304 	addi	sp,sp,-52
     fe4:	dfc00c15 	stw	ra,48(sp)
     fe8:	df000b15 	stw	fp,44(sp)
     fec:	df000b04 	addi	fp,sp,44
     ff0:	e13ffc15 	stw	r4,-16(fp)
     ff4:	e17ffd15 	stw	r5,-12(fp)
     ff8:	e1bffe15 	stw	r6,-8(fp)
     ffc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1000:	e0bffd17 	ldw	r2,-12(fp)
    1004:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1008:	00004706 	br	1128 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    100c:	e0bffc17 	ldw	r2,-16(fp)
    1010:	10800a17 	ldw	r2,40(r2)
    1014:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1018:	e0bffc17 	ldw	r2,-16(fp)
    101c:	10800b17 	ldw	r2,44(r2)
    1020:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    1024:	e0fff717 	ldw	r3,-36(fp)
    1028:	e0bff817 	ldw	r2,-32(fp)
    102c:	18800536 	bltu	r3,r2,1044 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1030:	e0fff717 	ldw	r3,-36(fp)
    1034:	e0bff817 	ldw	r2,-32(fp)
    1038:	1885c83a 	sub	r2,r3,r2
    103c:	e0bff615 	stw	r2,-40(fp)
    1040:	00000406 	br	1054 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1044:	00c20004 	movi	r3,2048
    1048:	e0bff817 	ldw	r2,-32(fp)
    104c:	1885c83a 	sub	r2,r3,r2
    1050:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1054:	e0bff617 	ldw	r2,-40(fp)
    1058:	10001e26 	beq	r2,zero,10d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    105c:	e0fffe17 	ldw	r3,-8(fp)
    1060:	e0bff617 	ldw	r2,-40(fp)
    1064:	1880022e 	bgeu	r3,r2,1070 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    1068:	e0bffe17 	ldw	r2,-8(fp)
    106c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    1070:	e0bffc17 	ldw	r2,-16(fp)
    1074:	10c00e04 	addi	r3,r2,56
    1078:	e0bff817 	ldw	r2,-32(fp)
    107c:	1885883a 	add	r2,r3,r2
    1080:	e1bff617 	ldw	r6,-40(fp)
    1084:	100b883a 	mov	r5,r2
    1088:	e13ff517 	ldw	r4,-44(fp)
    108c:	00031f40 	call	31f4 <memcpy>
      ptr   += n;
    1090:	e0fff517 	ldw	r3,-44(fp)
    1094:	e0bff617 	ldw	r2,-40(fp)
    1098:	1885883a 	add	r2,r3,r2
    109c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    10a0:	e0fffe17 	ldw	r3,-8(fp)
    10a4:	e0bff617 	ldw	r2,-40(fp)
    10a8:	1885c83a 	sub	r2,r3,r2
    10ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10b0:	e0fff817 	ldw	r3,-32(fp)
    10b4:	e0bff617 	ldw	r2,-40(fp)
    10b8:	1885883a 	add	r2,r3,r2
    10bc:	10c1ffcc 	andi	r3,r2,2047
    10c0:	e0bffc17 	ldw	r2,-16(fp)
    10c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    10c8:	e0bffe17 	ldw	r2,-8(fp)
    10cc:	00bfcf16 	blt	zero,r2,100c <__alt_data_end+0x8000100c>
    10d0:	00000106 	br	10d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    10d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    10d8:	e0fff517 	ldw	r3,-44(fp)
    10dc:	e0bffd17 	ldw	r2,-12(fp)
    10e0:	1880141e 	bne	r3,r2,1134 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    10e4:	e0bfff17 	ldw	r2,-4(fp)
    10e8:	1090000c 	andi	r2,r2,16384
    10ec:	1000131e 	bne	r2,zero,113c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    10f0:	0001883a 	nop
    10f4:	e0bffc17 	ldw	r2,-16(fp)
    10f8:	10c00a17 	ldw	r3,40(r2)
    10fc:	e0bff717 	ldw	r2,-36(fp)
    1100:	1880051e 	bne	r3,r2,1118 <altera_avalon_jtag_uart_read+0x138>
    1104:	e0bffc17 	ldw	r2,-16(fp)
    1108:	10c00917 	ldw	r3,36(r2)
    110c:	e0bffc17 	ldw	r2,-16(fp)
    1110:	10800117 	ldw	r2,4(r2)
    1114:	18bff736 	bltu	r3,r2,10f4 <__alt_data_end+0x800010f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1118:	e0bffc17 	ldw	r2,-16(fp)
    111c:	10c00a17 	ldw	r3,40(r2)
    1120:	e0bff717 	ldw	r2,-36(fp)
    1124:	18800726 	beq	r3,r2,1144 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1128:	e0bffe17 	ldw	r2,-8(fp)
    112c:	00bfb716 	blt	zero,r2,100c <__alt_data_end+0x8000100c>
    1130:	00000506 	br	1148 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    1134:	0001883a 	nop
    1138:	00000306 	br	1148 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    113c:	0001883a 	nop
    1140:	00000106 	br	1148 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    1144:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1148:	e0fff517 	ldw	r3,-44(fp)
    114c:	e0bffd17 	ldw	r2,-12(fp)
    1150:	18801826 	beq	r3,r2,11b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1154:	0005303a 	rdctl	r2,status
    1158:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    115c:	e0fffb17 	ldw	r3,-20(fp)
    1160:	00bfff84 	movi	r2,-2
    1164:	1884703a 	and	r2,r3,r2
    1168:	1001703a 	wrctl	status,r2
  
  return context;
    116c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1170:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1174:	e0bffc17 	ldw	r2,-16(fp)
    1178:	10800817 	ldw	r2,32(r2)
    117c:	10c00054 	ori	r3,r2,1
    1180:	e0bffc17 	ldw	r2,-16(fp)
    1184:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1188:	e0bffc17 	ldw	r2,-16(fp)
    118c:	10800017 	ldw	r2,0(r2)
    1190:	10800104 	addi	r2,r2,4
    1194:	1007883a 	mov	r3,r2
    1198:	e0bffc17 	ldw	r2,-16(fp)
    119c:	10800817 	ldw	r2,32(r2)
    11a0:	18800035 	stwio	r2,0(r3)
    11a4:	e0bffa17 	ldw	r2,-24(fp)
    11a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11ac:	e0bff917 	ldw	r2,-28(fp)
    11b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    11b4:	e0fff517 	ldw	r3,-44(fp)
    11b8:	e0bffd17 	ldw	r2,-12(fp)
    11bc:	18800426 	beq	r3,r2,11d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    11c0:	e0fff517 	ldw	r3,-44(fp)
    11c4:	e0bffd17 	ldw	r2,-12(fp)
    11c8:	1885c83a 	sub	r2,r3,r2
    11cc:	00000606 	br	11e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    11d0:	e0bfff17 	ldw	r2,-4(fp)
    11d4:	1090000c 	andi	r2,r2,16384
    11d8:	10000226 	beq	r2,zero,11e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    11dc:	00bffd44 	movi	r2,-11
    11e0:	00000106 	br	11e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    11e4:	00bffec4 	movi	r2,-5
}
    11e8:	e037883a 	mov	sp,fp
    11ec:	dfc00117 	ldw	ra,4(sp)
    11f0:	df000017 	ldw	fp,0(sp)
    11f4:	dec00204 	addi	sp,sp,8
    11f8:	f800283a 	ret

000011fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    11fc:	defff304 	addi	sp,sp,-52
    1200:	dfc00c15 	stw	ra,48(sp)
    1204:	df000b15 	stw	fp,44(sp)
    1208:	df000b04 	addi	fp,sp,44
    120c:	e13ffc15 	stw	r4,-16(fp)
    1210:	e17ffd15 	stw	r5,-12(fp)
    1214:	e1bffe15 	stw	r6,-8(fp)
    1218:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    121c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1220:	e0bffd17 	ldw	r2,-12(fp)
    1224:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1228:	00003706 	br	1308 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    122c:	e0bffc17 	ldw	r2,-16(fp)
    1230:	10800c17 	ldw	r2,48(r2)
    1234:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1238:	e0bffc17 	ldw	r2,-16(fp)
    123c:	10800d17 	ldw	r2,52(r2)
    1240:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    1244:	e0fff917 	ldw	r3,-28(fp)
    1248:	e0bff517 	ldw	r2,-44(fp)
    124c:	1880062e 	bgeu	r3,r2,1268 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1250:	e0fff517 	ldw	r3,-44(fp)
    1254:	e0bff917 	ldw	r2,-28(fp)
    1258:	1885c83a 	sub	r2,r3,r2
    125c:	10bfffc4 	addi	r2,r2,-1
    1260:	e0bff615 	stw	r2,-40(fp)
    1264:	00000b06 	br	1294 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    1268:	e0bff517 	ldw	r2,-44(fp)
    126c:	10000526 	beq	r2,zero,1284 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1270:	00c20004 	movi	r3,2048
    1274:	e0bff917 	ldw	r2,-28(fp)
    1278:	1885c83a 	sub	r2,r3,r2
    127c:	e0bff615 	stw	r2,-40(fp)
    1280:	00000406 	br	1294 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1284:	00c1ffc4 	movi	r3,2047
    1288:	e0bff917 	ldw	r2,-28(fp)
    128c:	1885c83a 	sub	r2,r3,r2
    1290:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1294:	e0bff617 	ldw	r2,-40(fp)
    1298:	10001e26 	beq	r2,zero,1314 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    129c:	e0fffe17 	ldw	r3,-8(fp)
    12a0:	e0bff617 	ldw	r2,-40(fp)
    12a4:	1880022e 	bgeu	r3,r2,12b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    12a8:	e0bffe17 	ldw	r2,-8(fp)
    12ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    12b0:	e0bffc17 	ldw	r2,-16(fp)
    12b4:	10c20e04 	addi	r3,r2,2104
    12b8:	e0bff917 	ldw	r2,-28(fp)
    12bc:	1885883a 	add	r2,r3,r2
    12c0:	e1bff617 	ldw	r6,-40(fp)
    12c4:	e17ffd17 	ldw	r5,-12(fp)
    12c8:	1009883a 	mov	r4,r2
    12cc:	00031f40 	call	31f4 <memcpy>
      ptr   += n;
    12d0:	e0fffd17 	ldw	r3,-12(fp)
    12d4:	e0bff617 	ldw	r2,-40(fp)
    12d8:	1885883a 	add	r2,r3,r2
    12dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    12e0:	e0fffe17 	ldw	r3,-8(fp)
    12e4:	e0bff617 	ldw	r2,-40(fp)
    12e8:	1885c83a 	sub	r2,r3,r2
    12ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12f0:	e0fff917 	ldw	r3,-28(fp)
    12f4:	e0bff617 	ldw	r2,-40(fp)
    12f8:	1885883a 	add	r2,r3,r2
    12fc:	10c1ffcc 	andi	r3,r2,2047
    1300:	e0bffc17 	ldw	r2,-16(fp)
    1304:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1308:	e0bffe17 	ldw	r2,-8(fp)
    130c:	00bfc716 	blt	zero,r2,122c <__alt_data_end+0x8000122c>
    1310:	00000106 	br	1318 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1314:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1318:	0005303a 	rdctl	r2,status
    131c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1320:	e0fffb17 	ldw	r3,-20(fp)
    1324:	00bfff84 	movi	r2,-2
    1328:	1884703a 	and	r2,r3,r2
    132c:	1001703a 	wrctl	status,r2
  
  return context;
    1330:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1334:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	10800817 	ldw	r2,32(r2)
    1340:	10c00094 	ori	r3,r2,2
    1344:	e0bffc17 	ldw	r2,-16(fp)
    1348:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	10800017 	ldw	r2,0(r2)
    1354:	10800104 	addi	r2,r2,4
    1358:	1007883a 	mov	r3,r2
    135c:	e0bffc17 	ldw	r2,-16(fp)
    1360:	10800817 	ldw	r2,32(r2)
    1364:	18800035 	stwio	r2,0(r3)
    1368:	e0bffa17 	ldw	r2,-24(fp)
    136c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1370:	e0bff817 	ldw	r2,-32(fp)
    1374:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	0080100e 	bge	zero,r2,13c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    1380:	e0bfff17 	ldw	r2,-4(fp)
    1384:	1090000c 	andi	r2,r2,16384
    1388:	1000101e 	bne	r2,zero,13cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    138c:	0001883a 	nop
    1390:	e0bffc17 	ldw	r2,-16(fp)
    1394:	10c00d17 	ldw	r3,52(r2)
    1398:	e0bff517 	ldw	r2,-44(fp)
    139c:	1880051e 	bne	r3,r2,13b4 <altera_avalon_jtag_uart_write+0x1b8>
    13a0:	e0bffc17 	ldw	r2,-16(fp)
    13a4:	10c00917 	ldw	r3,36(r2)
    13a8:	e0bffc17 	ldw	r2,-16(fp)
    13ac:	10800117 	ldw	r2,4(r2)
    13b0:	18bff736 	bltu	r3,r2,1390 <__alt_data_end+0x80001390>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    13b4:	e0bffc17 	ldw	r2,-16(fp)
    13b8:	10800917 	ldw	r2,36(r2)
    13bc:	1000051e 	bne	r2,zero,13d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    13c0:	e0bffe17 	ldw	r2,-8(fp)
    13c4:	00bfd016 	blt	zero,r2,1308 <__alt_data_end+0x80001308>
    13c8:	00000306 	br	13d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    13cc:	0001883a 	nop
    13d0:	00000106 	br	13d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    13d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    13d8:	e0fffd17 	ldw	r3,-12(fp)
    13dc:	e0bff717 	ldw	r2,-36(fp)
    13e0:	18800426 	beq	r3,r2,13f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    13e4:	e0fffd17 	ldw	r3,-12(fp)
    13e8:	e0bff717 	ldw	r2,-36(fp)
    13ec:	1885c83a 	sub	r2,r3,r2
    13f0:	00000606 	br	140c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    13f4:	e0bfff17 	ldw	r2,-4(fp)
    13f8:	1090000c 	andi	r2,r2,16384
    13fc:	10000226 	beq	r2,zero,1408 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1400:	00bffd44 	movi	r2,-11
    1404:	00000106 	br	140c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1408:	00bffec4 	movi	r2,-5
}
    140c:	e037883a 	mov	sp,fp
    1410:	dfc00117 	ldw	ra,4(sp)
    1414:	df000017 	ldw	fp,0(sp)
    1418:	dec00204 	addi	sp,sp,8
    141c:	f800283a 	ret

00001420 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1420:	defff904 	addi	sp,sp,-28
    1424:	dfc00615 	stw	ra,24(sp)
    1428:	df000515 	stw	fp,20(sp)
    142c:	df000504 	addi	fp,sp,20
    1430:	e13ffe15 	stw	r4,-8(fp)
    1434:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1438:	0007883a 	mov	r3,zero
    143c:	e0bffe17 	ldw	r2,-8(fp)
    1440:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1444:	e0bffe17 	ldw	r2,-8(fp)
    1448:	10800104 	addi	r2,r2,4
    144c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1450:	0005303a 	rdctl	r2,status
    1454:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1458:	e0fffc17 	ldw	r3,-16(fp)
    145c:	00bfff84 	movi	r2,-2
    1460:	1884703a 	and	r2,r3,r2
    1464:	1001703a 	wrctl	status,r2
  
  return context;
    1468:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    146c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    1470:	0002d280 	call	2d28 <alt_tick>
    1474:	e0bffb17 	ldw	r2,-20(fp)
    1478:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    147c:	e0bffd17 	ldw	r2,-12(fp)
    1480:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1484:	0001883a 	nop
    1488:	e037883a 	mov	sp,fp
    148c:	dfc00117 	ldw	ra,4(sp)
    1490:	df000017 	ldw	fp,0(sp)
    1494:	dec00204 	addi	sp,sp,8
    1498:	f800283a 	ret

0000149c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    149c:	defff904 	addi	sp,sp,-28
    14a0:	dfc00615 	stw	ra,24(sp)
    14a4:	df000515 	stw	fp,20(sp)
    14a8:	df000504 	addi	fp,sp,20
    14ac:	e13ffc15 	stw	r4,-16(fp)
    14b0:	e17ffd15 	stw	r5,-12(fp)
    14b4:	e1bffe15 	stw	r6,-8(fp)
    14b8:	e1ffff15 	stw	r7,-4(fp)
    14bc:	e0bfff17 	ldw	r2,-4(fp)
    14c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    14c4:	d0a00f17 	ldw	r2,-32708(gp)
    14c8:	1000021e 	bne	r2,zero,14d4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    14cc:	e0bffb17 	ldw	r2,-20(fp)
    14d0:	d0a00f15 	stw	r2,-32708(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    14d4:	e0bffc17 	ldw	r2,-16(fp)
    14d8:	10800104 	addi	r2,r2,4
    14dc:	00c001c4 	movi	r3,7
    14e0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    14e4:	01800034 	movhi	r6,0
    14e8:	31850804 	addi	r6,r6,5152
    14ec:	e17ffc17 	ldw	r5,-16(fp)
    14f0:	e13ffe17 	ldw	r4,-8(fp)
    14f4:	00028540 	call	2854 <alt_irq_register>
#endif  
}
    14f8:	0001883a 	nop
    14fc:	e037883a 	mov	sp,fp
    1500:	dfc00117 	ldw	ra,4(sp)
    1504:	df000017 	ldw	fp,0(sp)
    1508:	dec00204 	addi	sp,sp,8
    150c:	f800283a 	ret

00001510 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    1510:	defffd04 	addi	sp,sp,-12
    1514:	df000215 	stw	fp,8(sp)
    1518:	df000204 	addi	fp,sp,8
    151c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1520:	e0bfff17 	ldw	r2,-4(fp)
    1524:	10800a17 	ldw	r2,40(r2)
    1528:	10800104 	addi	r2,r2,4
    152c:	10800037 	ldwio	r2,0(r2)
    1530:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    1534:	e0bffe17 	ldw	r2,-8(fp)
    1538:	10800054 	ori	r2,r2,1
    153c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1540:	e0bfff17 	ldw	r2,-4(fp)
    1544:	10800a17 	ldw	r2,40(r2)
    1548:	10800104 	addi	r2,r2,4
    154c:	1007883a 	mov	r3,r2
    1550:	e0bffe17 	ldw	r2,-8(fp)
    1554:	18800035 	stwio	r2,0(r3)
}
    1558:	0001883a 	nop
    155c:	e037883a 	mov	sp,fp
    1560:	df000017 	ldw	fp,0(sp)
    1564:	dec00104 	addi	sp,sp,4
    1568:	f800283a 	ret

0000156c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    156c:	defffd04 	addi	sp,sp,-12
    1570:	df000215 	stw	fp,8(sp)
    1574:	df000204 	addi	fp,sp,8
    1578:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    157c:	e0bfff17 	ldw	r2,-4(fp)
    1580:	10800a17 	ldw	r2,40(r2)
    1584:	10800104 	addi	r2,r2,4
    1588:	10800037 	ldwio	r2,0(r2)
    158c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    1590:	e0fffe17 	ldw	r3,-8(fp)
    1594:	00bfff84 	movi	r2,-2
    1598:	1884703a 	and	r2,r3,r2
    159c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10800a17 	ldw	r2,40(r2)
    15a8:	10800104 	addi	r2,r2,4
    15ac:	1007883a 	mov	r3,r2
    15b0:	e0bffe17 	ldw	r2,-8(fp)
    15b4:	18800035 	stwio	r2,0(r3)
}
    15b8:	0001883a 	nop
    15bc:	e037883a 	mov	sp,fp
    15c0:	df000017 	ldw	fp,0(sp)
    15c4:	dec00104 	addi	sp,sp,4
    15c8:	f800283a 	ret

000015cc <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    15cc:	defffd04 	addi	sp,sp,-12
    15d0:	df000215 	stw	fp,8(sp)
    15d4:	df000204 	addi	fp,sp,8
    15d8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    15dc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	10800a17 	ldw	r2,40(r2)
    15e8:	10800084 	addi	r2,r2,2
    15ec:	1080002b 	ldhuio	r2,0(r2)
    15f0:	10bfffcc 	andi	r2,r2,65535
    15f4:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    15f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    15fc:	e037883a 	mov	sp,fp
    1600:	df000017 	ldw	fp,0(sp)
    1604:	dec00104 	addi	sp,sp,4
    1608:	f800283a 	ret

0000160c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    160c:	defffd04 	addi	sp,sp,-12
    1610:	df000215 	stw	fp,8(sp)
    1614:	df000204 	addi	fp,sp,8
    1618:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	10800a17 	ldw	r2,40(r2)
    1624:	10800104 	addi	r2,r2,4
    1628:	10800037 	ldwio	r2,0(r2)
    162c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    1630:	e0bffe17 	ldw	r2,-8(fp)
    1634:	1004d43a 	srli	r2,r2,16
}
    1638:	e037883a 	mov	sp,fp
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00104 	addi	sp,sp,4
    1644:	f800283a 	ret

00001648 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    1648:	defffd04 	addi	sp,sp,-12
    164c:	df000215 	stw	fp,8(sp)
    1650:	df000204 	addi	fp,sp,8
    1654:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    1658:	e0bfff17 	ldw	r2,-4(fp)
    165c:	1080800c 	andi	r2,r2,512
    1660:	1004d27a 	srli	r2,r2,9
    1664:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10000226 	beq	r2,zero,1678 <alt_up_irda_check_parity+0x30>
    1670:	00bfffc4 	movi	r2,-1
    1674:	00000106 	br	167c <alt_up_irda_check_parity+0x34>
    1678:	0005883a 	mov	r2,zero
}
    167c:	e037883a 	mov	sp,fp
    1680:	df000017 	ldw	fp,0(sp)
    1684:	dec00104 	addi	sp,sp,4
    1688:	f800283a 	ret

0000168c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    168c:	defffd04 	addi	sp,sp,-12
    1690:	df000215 	stw	fp,8(sp)
    1694:	df000204 	addi	fp,sp,8
    1698:	e13ffe15 	stw	r4,-8(fp)
    169c:	2805883a 	mov	r2,r5
    16a0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    16a4:	e0bffe17 	ldw	r2,-8(fp)
    16a8:	10800a17 	ldw	r2,40(r2)
    16ac:	1007883a 	mov	r3,r2
    16b0:	e0bfff03 	ldbu	r2,-4(fp)
    16b4:	18800035 	stwio	r2,0(r3)
	return 0;
    16b8:	0005883a 	mov	r2,zero
}
    16bc:	e037883a 	mov	sp,fp
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00104 	addi	sp,sp,4
    16c8:	f800283a 	ret

000016cc <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    16cc:	defffa04 	addi	sp,sp,-24
    16d0:	dfc00515 	stw	ra,20(sp)
    16d4:	df000415 	stw	fp,16(sp)
    16d8:	df000404 	addi	fp,sp,16
    16dc:	e13ffd15 	stw	r4,-12(fp)
    16e0:	e17ffe15 	stw	r5,-8(fp)
    16e4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    16e8:	e0bffd17 	ldw	r2,-12(fp)
    16ec:	10800a17 	ldw	r2,40(r2)
    16f0:	10800037 	ldwio	r2,0(r2)
    16f4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    16f8:	e0bffc17 	ldw	r2,-16(fp)
    16fc:	1007883a 	mov	r3,r2
    1700:	e0bffe17 	ldw	r2,-8(fp)
    1704:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    1708:	e13ffc17 	ldw	r4,-16(fp)
    170c:	00016480 	call	1648 <alt_up_irda_check_parity>
    1710:	1007883a 	mov	r3,r2
    1714:	e0bfff17 	ldw	r2,-4(fp)
    1718:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    171c:	e0bffc17 	ldw	r2,-16(fp)
    1720:	10a0000c 	andi	r2,r2,32768
    1724:	1004d3fa 	srli	r2,r2,15
    1728:	10bfffc4 	addi	r2,r2,-1
}
    172c:	e037883a 	mov	sp,fp
    1730:	dfc00117 	ldw	ra,4(sp)
    1734:	df000017 	ldw	fp,0(sp)
    1738:	dec00204 	addi	sp,sp,8
    173c:	f800283a 	ret

00001740 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    1740:	defff804 	addi	sp,sp,-32
    1744:	dfc00715 	stw	ra,28(sp)
    1748:	df000615 	stw	fp,24(sp)
    174c:	df000604 	addi	fp,sp,24
    1750:	e13ffd15 	stw	r4,-12(fp)
    1754:	e17ffe15 	stw	r5,-8(fp)
    1758:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    175c:	e0bffd17 	ldw	r2,-12(fp)
    1760:	10800017 	ldw	r2,0(r2)
    1764:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    1768:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    176c:	00000c06 	br	17a0 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    1770:	e0bffe17 	ldw	r2,-8(fp)
    1774:	10c00044 	addi	r3,r2,1
    1778:	e0fffe15 	stw	r3,-8(fp)
    177c:	e0fffc04 	addi	r3,fp,-16
    1780:	180d883a 	mov	r6,r3
    1784:	100b883a 	mov	r5,r2
    1788:	e13ffb17 	ldw	r4,-20(fp)
    178c:	00016cc0 	call	16cc <alt_up_irda_read_data>
    1790:	1000081e 	bne	r2,zero,17b4 <alt_up_irda_read_fd+0x74>
			count++;
    1794:	e0bffa17 	ldw	r2,-24(fp)
    1798:	10800044 	addi	r2,r2,1
    179c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    17a0:	e0bfff17 	ldw	r2,-4(fp)
    17a4:	10ffffc4 	addi	r3,r2,-1
    17a8:	e0ffff15 	stw	r3,-4(fp)
    17ac:	103ff01e 	bne	r2,zero,1770 <__alt_data_end+0x80001770>
    17b0:	00000106 	br	17b8 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    17b4:	0001883a 	nop
	}
	return count;
    17b8:	e0bffa17 	ldw	r2,-24(fp)
}
    17bc:	e037883a 	mov	sp,fp
    17c0:	dfc00117 	ldw	ra,4(sp)
    17c4:	df000017 	ldw	fp,0(sp)
    17c8:	dec00204 	addi	sp,sp,8
    17cc:	f800283a 	ret

000017d0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    17d0:	defff904 	addi	sp,sp,-28
    17d4:	dfc00615 	stw	ra,24(sp)
    17d8:	df000515 	stw	fp,20(sp)
    17dc:	df000504 	addi	fp,sp,20
    17e0:	e13ffd15 	stw	r4,-12(fp)
    17e4:	e17ffe15 	stw	r5,-8(fp)
    17e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    17ec:	e0bffd17 	ldw	r2,-12(fp)
    17f0:	10800017 	ldw	r2,0(r2)
    17f4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    17f8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    17fc:	00000c06 	br	1830 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    1800:	e0bffe17 	ldw	r2,-8(fp)
    1804:	10c00044 	addi	r3,r2,1
    1808:	e0fffe15 	stw	r3,-8(fp)
    180c:	10800003 	ldbu	r2,0(r2)
    1810:	10803fcc 	andi	r2,r2,255
    1814:	100b883a 	mov	r5,r2
    1818:	e13ffc17 	ldw	r4,-16(fp)
    181c:	000168c0 	call	168c <alt_up_irda_write_data>
    1820:	1000081e 	bne	r2,zero,1844 <alt_up_irda_write_fd+0x74>
			count++;
    1824:	e0bffb17 	ldw	r2,-20(fp)
    1828:	10800044 	addi	r2,r2,1
    182c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    1830:	e0bfff17 	ldw	r2,-4(fp)
    1834:	10ffffc4 	addi	r3,r2,-1
    1838:	e0ffff15 	stw	r3,-4(fp)
    183c:	103ff01e 	bne	r2,zero,1800 <__alt_data_end+0x80001800>
    1840:	00000106 	br	1848 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    1844:	0001883a 	nop
	}
	return count;
    1848:	e0bffb17 	ldw	r2,-20(fp)
}
    184c:	e037883a 	mov	sp,fp
    1850:	dfc00117 	ldw	ra,4(sp)
    1854:	df000017 	ldw	fp,0(sp)
    1858:	dec00204 	addi	sp,sp,8
    185c:	f800283a 	ret

00001860 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    1860:	defffc04 	addi	sp,sp,-16
    1864:	dfc00315 	stw	ra,12(sp)
    1868:	df000215 	stw	fp,8(sp)
    186c:	df000204 	addi	fp,sp,8
    1870:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    1874:	d1600204 	addi	r5,gp,-32760
    1878:	e13fff17 	ldw	r4,-4(fp)
    187c:	00026500 	call	2650 <alt_find_dev>
    1880:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1884:	e0bffe17 	ldw	r2,-8(fp)
}
    1888:	e037883a 	mov	sp,fp
    188c:	dfc00117 	ldw	ra,4(sp)
    1890:	df000017 	ldw	fp,0(sp)
    1894:	dec00204 	addi	sp,sp,8
    1898:	f800283a 	ret

0000189c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    189c:	defffd04 	addi	sp,sp,-12
    18a0:	df000215 	stw	fp,8(sp)
    18a4:	df000204 	addi	fp,sp,8
    18a8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    18ac:	e0bfff17 	ldw	r2,-4(fp)
    18b0:	1080400c 	andi	r2,r2,256
    18b4:	1004d23a 	srli	r2,r2,8
    18b8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    18bc:	e0bffe03 	ldbu	r2,-8(fp)
}
    18c0:	e037883a 	mov	sp,fp
    18c4:	df000017 	ldw	fp,0(sp)
    18c8:	dec00104 	addi	sp,sp,4
    18cc:	f800283a 	ret

000018d0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    18d0:	defffd04 	addi	sp,sp,-12
    18d4:	df000215 	stw	fp,8(sp)
    18d8:	df000204 	addi	fp,sp,8
    18dc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	1080004c 	andi	r2,r2,1
    18e8:	e0bffe05 	stb	r2,-8(fp)
	return re;
    18ec:	e0bffe03 	ldbu	r2,-8(fp)
}
    18f0:	e037883a 	mov	sp,fp
    18f4:	df000017 	ldw	fp,0(sp)
    18f8:	dec00104 	addi	sp,sp,4
    18fc:	f800283a 	ret

00001900 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    1900:	defffd04 	addi	sp,sp,-12
    1904:	df000215 	stw	fp,8(sp)
    1908:	df000204 	addi	fp,sp,8
    190c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    1910:	e0bfff17 	ldw	r2,-4(fp)
    1914:	1081000c 	andi	r2,r2,1024
    1918:	1004d2ba 	srli	r2,r2,10
    191c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    1920:	e0bffe03 	ldbu	r2,-8(fp)
}
    1924:	e037883a 	mov	sp,fp
    1928:	df000017 	ldw	fp,0(sp)
    192c:	dec00104 	addi	sp,sp,4
    1930:	f800283a 	ret

00001934 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    1934:	defffd04 	addi	sp,sp,-12
    1938:	df000215 	stw	fp,8(sp)
    193c:	df000204 	addi	fp,sp,8
    1940:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    1944:	e0bfff17 	ldw	r2,-4(fp)
    1948:	1004d43a 	srli	r2,r2,16
    194c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    1950:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1954:	e037883a 	mov	sp,fp
    1958:	df000017 	ldw	fp,0(sp)
    195c:	dec00104 	addi	sp,sp,4
    1960:	f800283a 	ret

00001964 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    1964:	defffd04 	addi	sp,sp,-12
    1968:	df000215 	stw	fp,8(sp)
    196c:	df000204 	addi	fp,sp,8
    1970:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    1974:	e0bfff17 	ldw	r2,-4(fp)
    1978:	10a0000c 	andi	r2,r2,32768
    197c:	1004d3fa 	srli	r2,r2,15
    1980:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    1984:	e0bffe03 	ldbu	r2,-8(fp)
}
    1988:	e037883a 	mov	sp,fp
    198c:	df000017 	ldw	fp,0(sp)
    1990:	dec00104 	addi	sp,sp,4
    1994:	f800283a 	ret

00001998 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    1998:	defffd04 	addi	sp,sp,-12
    199c:	df000215 	stw	fp,8(sp)
    19a0:	df000204 	addi	fp,sp,8
    19a4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	e0bffe05 	stb	r2,-8(fp)
	return data;
    19b0:	e0bffe03 	ldbu	r2,-8(fp)
}
    19b4:	e037883a 	mov	sp,fp
    19b8:	df000017 	ldw	fp,0(sp)
    19bc:	dec00104 	addi	sp,sp,4
    19c0:	f800283a 	ret

000019c4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    19c4:	defffb04 	addi	sp,sp,-20
    19c8:	dfc00415 	stw	ra,16(sp)
    19cc:	df000315 	stw	fp,12(sp)
    19d0:	df000304 	addi	fp,sp,12
    19d4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    19d8:	01403fc4 	movi	r5,255
    19dc:	e13fff17 	ldw	r4,-4(fp)
    19e0:	0001c240 	call	1c24 <alt_up_ps2_write_data_byte_with_ack>
    19e4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    19e8:	e0bffd17 	ldw	r2,-12(fp)
    19ec:	1000211e 	bne	r2,zero,1a74 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    19f0:	e0bffe04 	addi	r2,fp,-8
    19f4:	100b883a 	mov	r5,r2
    19f8:	e13fff17 	ldw	r4,-4(fp)
    19fc:	0001c880 	call	1c88 <alt_up_ps2_read_data_byte_timeout>
    1a00:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    1a04:	e0bffd17 	ldw	r2,-12(fp)
    1a08:	10001a1e 	bne	r2,zero,1a74 <alt_up_ps2_init+0xb0>
    1a0c:	e0bffe03 	ldbu	r2,-8(fp)
    1a10:	10803fcc 	andi	r2,r2,255
    1a14:	10802a98 	cmpnei	r2,r2,170
    1a18:	1000161e 	bne	r2,zero,1a74 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1a1c:	e0bffe04 	addi	r2,fp,-8
    1a20:	100b883a 	mov	r5,r2
    1a24:	e13fff17 	ldw	r4,-4(fp)
    1a28:	0001c880 	call	1c88 <alt_up_ps2_read_data_byte_timeout>
    1a2c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    1a30:	e0bffd17 	ldw	r2,-12(fp)
    1a34:	10bfe318 	cmpnei	r2,r2,-116
    1a38:	1000041e 	bne	r2,zero,1a4c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1a3c:	e0bfff17 	ldw	r2,-4(fp)
    1a40:	00c00044 	movi	r3,1
    1a44:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    1a48:	00000a06 	br	1a74 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    1a4c:	e0bffd17 	ldw	r2,-12(fp)
    1a50:	1000081e 	bne	r2,zero,1a74 <alt_up_ps2_init+0xb0>
    1a54:	e0bffe03 	ldbu	r2,-8(fp)
    1a58:	10803fcc 	andi	r2,r2,255
    1a5c:	1000051e 	bne	r2,zero,1a74 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1a60:	e0bfff17 	ldw	r2,-4(fp)
    1a64:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1a68:	01403d04 	movi	r5,244
    1a6c:	e13fff17 	ldw	r4,-4(fp)
    1a70:	0001b480 	call	1b48 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1a74:	0001883a 	nop
    1a78:	e037883a 	mov	sp,fp
    1a7c:	dfc00117 	ldw	ra,4(sp)
    1a80:	df000017 	ldw	fp,0(sp)
    1a84:	dec00204 	addi	sp,sp,8
    1a88:	f800283a 	ret

00001a8c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    1a8c:	defffd04 	addi	sp,sp,-12
    1a90:	df000215 	stw	fp,8(sp)
    1a94:	df000204 	addi	fp,sp,8
    1a98:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1a9c:	e0bfff17 	ldw	r2,-4(fp)
    1aa0:	10800a17 	ldw	r2,40(r2)
    1aa4:	10800104 	addi	r2,r2,4
    1aa8:	10800037 	ldwio	r2,0(r2)
    1aac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1ab0:	e0bffe17 	ldw	r2,-8(fp)
    1ab4:	10800054 	ori	r2,r2,1
    1ab8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1abc:	e0bfff17 	ldw	r2,-4(fp)
    1ac0:	10800a17 	ldw	r2,40(r2)
    1ac4:	10800104 	addi	r2,r2,4
    1ac8:	1007883a 	mov	r3,r2
    1acc:	e0bffe17 	ldw	r2,-8(fp)
    1ad0:	18800035 	stwio	r2,0(r3)
}
    1ad4:	0001883a 	nop
    1ad8:	e037883a 	mov	sp,fp
    1adc:	df000017 	ldw	fp,0(sp)
    1ae0:	dec00104 	addi	sp,sp,4
    1ae4:	f800283a 	ret

00001ae8 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    1ae8:	defffd04 	addi	sp,sp,-12
    1aec:	df000215 	stw	fp,8(sp)
    1af0:	df000204 	addi	fp,sp,8
    1af4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1af8:	e0bfff17 	ldw	r2,-4(fp)
    1afc:	10800a17 	ldw	r2,40(r2)
    1b00:	10800104 	addi	r2,r2,4
    1b04:	10800037 	ldwio	r2,0(r2)
    1b08:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1b0c:	e0fffe17 	ldw	r3,-8(fp)
    1b10:	00bfff84 	movi	r2,-2
    1b14:	1884703a 	and	r2,r3,r2
    1b18:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1b1c:	e0bfff17 	ldw	r2,-4(fp)
    1b20:	10800a17 	ldw	r2,40(r2)
    1b24:	10800104 	addi	r2,r2,4
    1b28:	1007883a 	mov	r3,r2
    1b2c:	e0bffe17 	ldw	r2,-8(fp)
    1b30:	18800035 	stwio	r2,0(r3)
}
    1b34:	0001883a 	nop
    1b38:	e037883a 	mov	sp,fp
    1b3c:	df000017 	ldw	fp,0(sp)
    1b40:	dec00104 	addi	sp,sp,4
    1b44:	f800283a 	ret

00001b48 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1b48:	defffb04 	addi	sp,sp,-20
    1b4c:	dfc00415 	stw	ra,16(sp)
    1b50:	df000315 	stw	fp,12(sp)
    1b54:	df000304 	addi	fp,sp,12
    1b58:	e13ffe15 	stw	r4,-8(fp)
    1b5c:	2805883a 	mov	r2,r5
    1b60:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1b64:	e0bffe17 	ldw	r2,-8(fp)
    1b68:	10800a17 	ldw	r2,40(r2)
    1b6c:	1007883a 	mov	r3,r2
    1b70:	e0bfff03 	ldbu	r2,-4(fp)
    1b74:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1b78:	e0bffe17 	ldw	r2,-8(fp)
    1b7c:	10800a17 	ldw	r2,40(r2)
    1b80:	10800104 	addi	r2,r2,4
    1b84:	10800037 	ldwio	r2,0(r2)
    1b88:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    1b8c:	e13ffd17 	ldw	r4,-12(fp)
    1b90:	00019000 	call	1900 <read_CE_bit>
    1b94:	10803fcc 	andi	r2,r2,255
    1b98:	10000226 	beq	r2,zero,1ba4 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    1b9c:	00bffec4 	movi	r2,-5
    1ba0:	00000106 	br	1ba8 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    1ba4:	0005883a 	mov	r2,zero
}
    1ba8:	e037883a 	mov	sp,fp
    1bac:	dfc00117 	ldw	ra,4(sp)
    1bb0:	df000017 	ldw	fp,0(sp)
    1bb4:	dec00204 	addi	sp,sp,8
    1bb8:	f800283a 	ret

00001bbc <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    1bbc:	defffc04 	addi	sp,sp,-16
    1bc0:	dfc00315 	stw	ra,12(sp)
    1bc4:	df000215 	stw	fp,8(sp)
    1bc8:	df000204 	addi	fp,sp,8
    1bcc:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    1bd0:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    1bd4:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1bd8:	e0bffe44 	addi	r2,fp,-7
    1bdc:	100b883a 	mov	r5,r2
    1be0:	e13fff17 	ldw	r4,-4(fp)
    1be4:	0001c880 	call	1c88 <alt_up_ps2_read_data_byte_timeout>
    1be8:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    1bec:	e0bffe03 	ldbu	r2,-8(fp)
    1bf0:	1000061e 	bne	r2,zero,1c0c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    1bf4:	e0bffe43 	ldbu	r2,-7(fp)
    1bf8:	10803fcc 	andi	r2,r2,255
    1bfc:	10803e98 	cmpnei	r2,r2,250
    1c00:	103ff51e 	bne	r2,zero,1bd8 <__alt_data_end+0x80001bd8>
				return 0;
    1c04:	0005883a 	mov	r2,zero
    1c08:	00000106 	br	1c10 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    1c0c:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    1c10:	e037883a 	mov	sp,fp
    1c14:	dfc00117 	ldw	ra,4(sp)
    1c18:	df000017 	ldw	fp,0(sp)
    1c1c:	dec00204 	addi	sp,sp,8
    1c20:	f800283a 	ret

00001c24 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1c24:	defffa04 	addi	sp,sp,-24
    1c28:	dfc00515 	stw	ra,20(sp)
    1c2c:	df000415 	stw	fp,16(sp)
    1c30:	df000404 	addi	fp,sp,16
    1c34:	e13ffe15 	stw	r4,-8(fp)
    1c38:	2805883a 	mov	r2,r5
    1c3c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1c40:	e0bfff03 	ldbu	r2,-4(fp)
    1c44:	100b883a 	mov	r5,r2
    1c48:	e13ffe17 	ldw	r4,-8(fp)
    1c4c:	0001b480 	call	1b48 <alt_up_ps2_write_data_byte>
    1c50:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    1c54:	e0bffc17 	ldw	r2,-16(fp)
    1c58:	10000226 	beq	r2,zero,1c64 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    1c5c:	e0bffc17 	ldw	r2,-16(fp)
    1c60:	00000406 	br	1c74 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1c64:	e13ffe17 	ldw	r4,-8(fp)
    1c68:	0001bbc0 	call	1bbc <alt_up_ps2_wait_for_ack>
    1c6c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    1c70:	e0bffd17 	ldw	r2,-12(fp)
}
    1c74:	e037883a 	mov	sp,fp
    1c78:	dfc00117 	ldw	ra,4(sp)
    1c7c:	df000017 	ldw	fp,0(sp)
    1c80:	dec00204 	addi	sp,sp,8
    1c84:	f800283a 	ret

00001c88 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1c88:	defffa04 	addi	sp,sp,-24
    1c8c:	dfc00515 	stw	ra,20(sp)
    1c90:	df000415 	stw	fp,16(sp)
    1c94:	df000404 	addi	fp,sp,16
    1c98:	e13ffe15 	stw	r4,-8(fp)
    1c9c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    1ca0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    1ca4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	10800044 	addi	r2,r2,1
    1cb0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1cb4:	e0bffe17 	ldw	r2,-8(fp)
    1cb8:	10800a17 	ldw	r2,40(r2)
    1cbc:	10800037 	ldwio	r2,0(r2)
    1cc0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    1cc4:	e13ffd17 	ldw	r4,-12(fp)
    1cc8:	00019640 	call	1964 <read_data_valid>
    1ccc:	10803fcc 	andi	r2,r2,255
    1cd0:	10000726 	beq	r2,zero,1cf0 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    1cd4:	e13ffd17 	ldw	r4,-12(fp)
    1cd8:	00019980 	call	1998 <read_data_byte>
    1cdc:	1007883a 	mov	r3,r2
    1ce0:	e0bfff17 	ldw	r2,-4(fp)
    1ce4:	10c00005 	stb	r3,0(r2)
			return 0;
    1ce8:	0005883a 	mov	r2,zero
    1cec:	00000806 	br	1d10 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    1cf0:	e0bffe17 	ldw	r2,-8(fp)
    1cf4:	10800c17 	ldw	r2,48(r2)
    1cf8:	103feb26 	beq	r2,zero,1ca8 <__alt_data_end+0x80001ca8>
    1cfc:	e0bffe17 	ldw	r2,-8(fp)
    1d00:	10c00c17 	ldw	r3,48(r2)
    1d04:	e0bffc17 	ldw	r2,-16(fp)
    1d08:	18bfe72e 	bgeu	r3,r2,1ca8 <__alt_data_end+0x80001ca8>
		{
			return -ETIMEDOUT;
    1d0c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    1d10:	e037883a 	mov	sp,fp
    1d14:	dfc00117 	ldw	ra,4(sp)
    1d18:	df000017 	ldw	fp,0(sp)
    1d1c:	dec00204 	addi	sp,sp,8
    1d20:	f800283a 	ret

00001d24 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    1d24:	defffb04 	addi	sp,sp,-20
    1d28:	dfc00415 	stw	ra,16(sp)
    1d2c:	df000315 	stw	fp,12(sp)
    1d30:	df000304 	addi	fp,sp,12
    1d34:	e13ffe15 	stw	r4,-8(fp)
    1d38:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    1d3c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1d40:	e0bffe17 	ldw	r2,-8(fp)
    1d44:	10800a17 	ldw	r2,40(r2)
    1d48:	10800037 	ldwio	r2,0(r2)
    1d4c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    1d50:	e13ffd17 	ldw	r4,-12(fp)
    1d54:	00019640 	call	1964 <read_data_valid>
    1d58:	10803fcc 	andi	r2,r2,255
    1d5c:	10000726 	beq	r2,zero,1d7c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    1d60:	e13ffd17 	ldw	r4,-12(fp)
    1d64:	00019980 	call	1998 <read_data_byte>
    1d68:	1007883a 	mov	r3,r2
    1d6c:	e0bfff17 	ldw	r2,-4(fp)
    1d70:	10c00005 	stb	r3,0(r2)
		return 0;
    1d74:	0005883a 	mov	r2,zero
    1d78:	00000106 	br	1d80 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    1d7c:	00bfffc4 	movi	r2,-1
}
    1d80:	e037883a 	mov	sp,fp
    1d84:	dfc00117 	ldw	ra,4(sp)
    1d88:	df000017 	ldw	fp,0(sp)
    1d8c:	dec00204 	addi	sp,sp,8
    1d90:	f800283a 	ret

00001d94 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    1d94:	defffb04 	addi	sp,sp,-20
    1d98:	dfc00415 	stw	ra,16(sp)
    1d9c:	df000315 	stw	fp,12(sp)
    1da0:	df000304 	addi	fp,sp,12
    1da4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    1da8:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    1dac:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1db0:	e0bfff17 	ldw	r2,-4(fp)
    1db4:	10800a17 	ldw	r2,40(r2)
    1db8:	10800037 	ldwio	r2,0(r2)
    1dbc:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    1dc0:	e13ffe17 	ldw	r4,-8(fp)
    1dc4:	00019340 	call	1934 <read_num_bytes_available>
    1dc8:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    1dcc:	e0bffd0b 	ldhu	r2,-12(fp)
    1dd0:	103ff71e 	bne	r2,zero,1db0 <__alt_data_end+0x80001db0>
}
    1dd4:	0001883a 	nop
    1dd8:	e037883a 	mov	sp,fp
    1ddc:	dfc00117 	ldw	ra,4(sp)
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00204 	addi	sp,sp,8
    1de8:	f800283a 	ret

00001dec <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1dec:	defff804 	addi	sp,sp,-32
    1df0:	dfc00715 	stw	ra,28(sp)
    1df4:	df000615 	stw	fp,24(sp)
    1df8:	df000604 	addi	fp,sp,24
    1dfc:	e13ffd15 	stw	r4,-12(fp)
    1e00:	e17ffe15 	stw	r5,-8(fp)
    1e04:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1e08:	e0bffd17 	ldw	r2,-12(fp)
    1e0c:	10800017 	ldw	r2,0(r2)
    1e10:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    1e14:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    1e18:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    1e1c:	e0fffc17 	ldw	r3,-16(fp)
    1e20:	e0bfff17 	ldw	r2,-4(fp)
    1e24:	18bffd16 	blt	r3,r2,1e1c <__alt_data_end+0x80001e1c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	10c00044 	addi	r3,r2,1
    1e30:	e0fffe15 	stw	r3,-8(fp)
    1e34:	100b883a 	mov	r5,r2
    1e38:	e13ffa17 	ldw	r4,-24(fp)
    1e3c:	0001c880 	call	1c88 <alt_up_ps2_read_data_byte_timeout>
    1e40:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    1e44:	e0bffb17 	ldw	r2,-20(fp)
    1e48:	10000226 	beq	r2,zero,1e54 <alt_up_ps2_read_fd+0x68>
			return count;
    1e4c:	e0bffc17 	ldw	r2,-16(fp)
    1e50:	00000406 	br	1e64 <alt_up_ps2_read_fd+0x78>
		count++;
    1e54:	e0bffc17 	ldw	r2,-16(fp)
    1e58:	10800044 	addi	r2,r2,1
    1e5c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    1e60:	e0bffc17 	ldw	r2,-16(fp)
}
    1e64:	e037883a 	mov	sp,fp
    1e68:	dfc00117 	ldw	ra,4(sp)
    1e6c:	df000017 	ldw	fp,0(sp)
    1e70:	dec00204 	addi	sp,sp,8
    1e74:	f800283a 	ret

00001e78 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1e78:	defff804 	addi	sp,sp,-32
    1e7c:	dfc00715 	stw	ra,28(sp)
    1e80:	df000615 	stw	fp,24(sp)
    1e84:	df000604 	addi	fp,sp,24
    1e88:	e13ffd15 	stw	r4,-12(fp)
    1e8c:	e17ffe15 	stw	r5,-8(fp)
    1e90:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1e94:	e0bffd17 	ldw	r2,-12(fp)
    1e98:	10800017 	ldw	r2,0(r2)
    1e9c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    1ea0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    1ea4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    1ea8:	00001006 	br	1eec <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1eac:	e0bffe17 	ldw	r2,-8(fp)
    1eb0:	10c00044 	addi	r3,r2,1
    1eb4:	e0fffe15 	stw	r3,-8(fp)
    1eb8:	10800003 	ldbu	r2,0(r2)
    1ebc:	10803fcc 	andi	r2,r2,255
    1ec0:	100b883a 	mov	r5,r2
    1ec4:	e13ffb17 	ldw	r4,-20(fp)
    1ec8:	0001b480 	call	1b48 <alt_up_ps2_write_data_byte>
    1ecc:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    1ed0:	e0bffc17 	ldw	r2,-16(fp)
    1ed4:	10000226 	beq	r2,zero,1ee0 <alt_up_ps2_write_fd+0x68>
			return count;
    1ed8:	e0bffa17 	ldw	r2,-24(fp)
    1edc:	00000706 	br	1efc <alt_up_ps2_write_fd+0x84>
		count++;
    1ee0:	e0bffa17 	ldw	r2,-24(fp)
    1ee4:	10800044 	addi	r2,r2,1
    1ee8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1eec:	e0fffa17 	ldw	r3,-24(fp)
    1ef0:	e0bfff17 	ldw	r2,-4(fp)
    1ef4:	18bfed16 	blt	r3,r2,1eac <__alt_data_end+0x80001eac>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    1ef8:	e0bffa17 	ldw	r2,-24(fp)
}
    1efc:	e037883a 	mov	sp,fp
    1f00:	dfc00117 	ldw	ra,4(sp)
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00204 	addi	sp,sp,8
    1f0c:	f800283a 	ret

00001f10 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1f10:	defffc04 	addi	sp,sp,-16
    1f14:	dfc00315 	stw	ra,12(sp)
    1f18:	df000215 	stw	fp,8(sp)
    1f1c:	df000204 	addi	fp,sp,8
    1f20:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1f24:	d1600204 	addi	r5,gp,-32760
    1f28:	e13fff17 	ldw	r4,-4(fp)
    1f2c:	00026500 	call	2650 <alt_find_dev>
    1f30:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1f34:	e0bffe17 	ldw	r2,-8(fp)
}
    1f38:	e037883a 	mov	sp,fp
    1f3c:	dfc00117 	ldw	ra,4(sp)
    1f40:	df000017 	ldw	fp,0(sp)
    1f44:	dec00204 	addi	sp,sp,8
    1f48:	f800283a 	ret

00001f4c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1f4c:	defffc04 	addi	sp,sp,-16
    1f50:	dfc00315 	stw	ra,12(sp)
    1f54:	df000215 	stw	fp,8(sp)
    1f58:	df000204 	addi	fp,sp,8
    1f5c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1f60:	e0bfff17 	ldw	r2,-4(fp)
    1f64:	10800217 	ldw	r2,8(r2)
    1f68:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    1f6c:	00000b06 	br	1f9c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1f70:	01500034 	movhi	r5,16384
    1f74:	29403e04 	addi	r5,r5,248
    1f78:	e13ffe17 	ldw	r4,-8(fp)
    1f7c:	000333c0 	call	333c <strcmp>
    1f80:	1000031e 	bne	r2,zero,1f90 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    1f84:	e0bffe17 	ldw	r2,-8(fp)
    1f88:	10000005 	stb	zero,0(r2)
			break;
    1f8c:	00000906 	br	1fb4 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1f90:	e0bffe17 	ldw	r2,-8(fp)
    1f94:	10800044 	addi	r2,r2,1
    1f98:	e0bffe15 	stw	r2,-8(fp)
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	10800003 	ldbu	r2,0(r2)
    1fa4:	10803fcc 	andi	r2,r2,255
    1fa8:	1080201c 	xori	r2,r2,128
    1fac:	10bfe004 	addi	r2,r2,-128
    1fb0:	103fef1e 	bne	r2,zero,1f70 <__alt_data_end+0x80001f70>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    1fb4:	0001883a 	nop
}
    1fb8:	e037883a 	mov	sp,fp
    1fbc:	dfc00117 	ldw	ra,4(sp)
    1fc0:	df000017 	ldw	fp,0(sp)
    1fc4:	dec00204 	addi	sp,sp,8
    1fc8:	f800283a 	ret

00001fcc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1fcc:	defffc04 	addi	sp,sp,-16
    1fd0:	dfc00315 	stw	ra,12(sp)
    1fd4:	df000215 	stw	fp,8(sp)
    1fd8:	df000204 	addi	fp,sp,8
    1fdc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1fe0:	d1600204 	addi	r5,gp,-32760
    1fe4:	e13fff17 	ldw	r4,-4(fp)
    1fe8:	00026500 	call	2650 <alt_find_dev>
    1fec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1ff0:	e0bffe17 	ldw	r2,-8(fp)
}
    1ff4:	e037883a 	mov	sp,fp
    1ff8:	dfc00117 	ldw	ra,4(sp)
    1ffc:	df000017 	ldw	fp,0(sp)
    2000:	dec00204 	addi	sp,sp,8
    2004:	f800283a 	ret

00002008 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    2008:	defffa04 	addi	sp,sp,-24
    200c:	df000515 	stw	fp,20(sp)
    2010:	df000504 	addi	fp,sp,20
    2014:	e13ffc15 	stw	r4,-16(fp)
    2018:	2805883a 	mov	r2,r5
    201c:	e1bffe15 	stw	r6,-8(fp)
    2020:	e1ffff15 	stw	r7,-4(fp)
    2024:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    2028:	e0bffc17 	ldw	r2,-16(fp)
    202c:	10800c17 	ldw	r2,48(r2)
    2030:	e0fffe17 	ldw	r3,-8(fp)
    2034:	1880042e 	bgeu	r3,r2,2048 <alt_up_char_buffer_draw+0x40>
    2038:	e0bffc17 	ldw	r2,-16(fp)
    203c:	10800d17 	ldw	r2,52(r2)
    2040:	e0ffff17 	ldw	r3,-4(fp)
    2044:	18800236 	bltu	r3,r2,2050 <alt_up_char_buffer_draw+0x48>
		return -1;
    2048:	00bfffc4 	movi	r2,-1
    204c:	00001d06 	br	20c4 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    2050:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    2054:	e0bffc17 	ldw	r2,-16(fp)
    2058:	10c00f17 	ldw	r3,60(r2)
    205c:	e0bffe17 	ldw	r2,-8(fp)
    2060:	1886703a 	and	r3,r3,r2
    2064:	e0bffc17 	ldw	r2,-16(fp)
    2068:	10800e17 	ldw	r2,56(r2)
    206c:	1884983a 	sll	r2,r3,r2
    2070:	e0fffb17 	ldw	r3,-20(fp)
    2074:	1884b03a 	or	r2,r3,r2
    2078:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    207c:	e0bffc17 	ldw	r2,-16(fp)
    2080:	10c01117 	ldw	r3,68(r2)
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	1886703a 	and	r3,r3,r2
    208c:	e0bffc17 	ldw	r2,-16(fp)
    2090:	10801017 	ldw	r2,64(r2)
    2094:	1884983a 	sll	r2,r3,r2
    2098:	e0fffb17 	ldw	r3,-20(fp)
    209c:	1884b03a 	or	r2,r3,r2
    20a0:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    20a4:	e0bffc17 	ldw	r2,-16(fp)
    20a8:	10c00b17 	ldw	r3,44(r2)
    20ac:	e0bffb17 	ldw	r2,-20(fp)
    20b0:	1885883a 	add	r2,r3,r2
    20b4:	1007883a 	mov	r3,r2
    20b8:	e0bffd03 	ldbu	r2,-12(fp)
    20bc:	18800025 	stbio	r2,0(r3)

	return 0;
    20c0:	0005883a 	mov	r2,zero
}
    20c4:	e037883a 	mov	sp,fp
    20c8:	df000017 	ldw	fp,0(sp)
    20cc:	dec00104 	addi	sp,sp,4
    20d0:	f800283a 	ret

000020d4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    20d4:	defffa04 	addi	sp,sp,-24
    20d8:	df000515 	stw	fp,20(sp)
    20dc:	df000504 	addi	fp,sp,20
    20e0:	e13ffc15 	stw	r4,-16(fp)
    20e4:	e17ffd15 	stw	r5,-12(fp)
    20e8:	e1bffe15 	stw	r6,-8(fp)
    20ec:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    20f0:	e0bffc17 	ldw	r2,-16(fp)
    20f4:	10800c17 	ldw	r2,48(r2)
    20f8:	e0fffe17 	ldw	r3,-8(fp)
    20fc:	1880042e 	bgeu	r3,r2,2110 <alt_up_char_buffer_string+0x3c>
    2100:	e0bffc17 	ldw	r2,-16(fp)
    2104:	10800d17 	ldw	r2,52(r2)
    2108:	e0ffff17 	ldw	r3,-4(fp)
    210c:	18800236 	bltu	r3,r2,2118 <alt_up_char_buffer_string+0x44>
		return -1;
    2110:	00bfffc4 	movi	r2,-1
    2114:	00002a06 	br	21c0 <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
    2118:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    211c:	e0bffc17 	ldw	r2,-16(fp)
    2120:	10801017 	ldw	r2,64(r2)
    2124:	e0ffff17 	ldw	r3,-4(fp)
    2128:	1886983a 	sll	r3,r3,r2
    212c:	e0bffe17 	ldw	r2,-8(fp)
    2130:	1885883a 	add	r2,r3,r2
    2134:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    2138:	00001a06 	br	21a4 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    213c:	e0bffc17 	ldw	r2,-16(fp)
    2140:	10c00b17 	ldw	r3,44(r2)
    2144:	e0bffb17 	ldw	r2,-20(fp)
    2148:	1885883a 	add	r2,r3,r2
    214c:	1007883a 	mov	r3,r2
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	10800003 	ldbu	r2,0(r2)
    2158:	10803fcc 	andi	r2,r2,255
    215c:	1080201c 	xori	r2,r2,128
    2160:	10bfe004 	addi	r2,r2,-128
    2164:	18800025 	stbio	r2,0(r3)
		++ptr;
    2168:	e0bffd17 	ldw	r2,-12(fp)
    216c:	10800044 	addi	r2,r2,1
    2170:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    2174:	e0bffe17 	ldw	r2,-8(fp)
    2178:	10800044 	addi	r2,r2,1
    217c:	e0bffe15 	stw	r2,-8(fp)
    2180:	e0bffc17 	ldw	r2,-16(fp)
    2184:	10800c17 	ldw	r2,48(r2)
    2188:	e0fffe17 	ldw	r3,-8(fp)
    218c:	18800236 	bltu	r3,r2,2198 <alt_up_char_buffer_string+0xc4>
			return -1;
    2190:	00bfffc4 	movi	r2,-1
    2194:	00000a06 	br	21c0 <alt_up_char_buffer_string+0xec>
		++offset;
    2198:	e0bffb17 	ldw	r2,-20(fp)
    219c:	10800044 	addi	r2,r2,1
    21a0:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    21a4:	e0bffd17 	ldw	r2,-12(fp)
    21a8:	10800003 	ldbu	r2,0(r2)
    21ac:	10803fcc 	andi	r2,r2,255
    21b0:	1080201c 	xori	r2,r2,128
    21b4:	10bfe004 	addi	r2,r2,-128
    21b8:	103fe01e 	bne	r2,zero,213c <__alt_data_end+0x8000213c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    21bc:	0005883a 	mov	r2,zero
}
    21c0:	e037883a 	mov	sp,fp
    21c4:	df000017 	ldw	fp,0(sp)
    21c8:	dec00104 	addi	sp,sp,4
    21cc:	f800283a 	ret

000021d0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    21d0:	defffe04 	addi	sp,sp,-8
    21d4:	df000115 	stw	fp,4(sp)
    21d8:	df000104 	addi	fp,sp,4
    21dc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    21e0:	e0bfff17 	ldw	r2,-4(fp)
    21e4:	10800a17 	ldw	r2,40(r2)
    21e8:	10800084 	addi	r2,r2,2
    21ec:	1007883a 	mov	r3,r2
    21f0:	00800044 	movi	r2,1
    21f4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    21f8:	0001883a 	nop
    21fc:	e0bfff17 	ldw	r2,-4(fp)
    2200:	10800a17 	ldw	r2,40(r2)
    2204:	10800084 	addi	r2,r2,2
    2208:	10800023 	ldbuio	r2,0(r2)
    220c:	10803fcc 	andi	r2,r2,255
    2210:	1080004c 	andi	r2,r2,1
    2214:	103ff91e 	bne	r2,zero,21fc <__alt_data_end+0x800021fc>
	return 0;
    2218:	0005883a 	mov	r2,zero
}
    221c:	e037883a 	mov	sp,fp
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00104 	addi	sp,sp,4
    2228:	f800283a 	ret

0000222c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    222c:	defff504 	addi	sp,sp,-44
    2230:	df000a15 	stw	fp,40(sp)
    2234:	df000a04 	addi	fp,sp,40
    2238:	e13ffc15 	stw	r4,-16(fp)
    223c:	e17ffd15 	stw	r5,-12(fp)
    2240:	e1bffe15 	stw	r6,-8(fp)
    2244:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2248:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    224c:	d0a00f17 	ldw	r2,-32708(gp)
  
  if (alt_ticks_per_second ())
    2250:	10003c26 	beq	r2,zero,2344 <alt_alarm_start+0x118>
  {
    if (alarm)
    2254:	e0bffc17 	ldw	r2,-16(fp)
    2258:	10003826 	beq	r2,zero,233c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    225c:	e0bffc17 	ldw	r2,-16(fp)
    2260:	e0fffe17 	ldw	r3,-8(fp)
    2264:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    2268:	e0bffc17 	ldw	r2,-16(fp)
    226c:	e0ffff17 	ldw	r3,-4(fp)
    2270:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2274:	0005303a 	rdctl	r2,status
    2278:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    227c:	e0fff917 	ldw	r3,-28(fp)
    2280:	00bfff84 	movi	r2,-2
    2284:	1884703a 	and	r2,r3,r2
    2288:	1001703a 	wrctl	status,r2
  
  return context;
    228c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    2290:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2294:	d0a01017 	ldw	r2,-32704(gp)
      
      current_nticks = alt_nticks();
    2298:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    229c:	e0fffd17 	ldw	r3,-12(fp)
    22a0:	e0bff617 	ldw	r2,-40(fp)
    22a4:	1885883a 	add	r2,r3,r2
    22a8:	10c00044 	addi	r3,r2,1
    22ac:	e0bffc17 	ldw	r2,-16(fp)
    22b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    22b4:	e0bffc17 	ldw	r2,-16(fp)
    22b8:	10c00217 	ldw	r3,8(r2)
    22bc:	e0bff617 	ldw	r2,-40(fp)
    22c0:	1880042e 	bgeu	r3,r2,22d4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    22c4:	e0bffc17 	ldw	r2,-16(fp)
    22c8:	00c00044 	movi	r3,1
    22cc:	10c00405 	stb	r3,16(r2)
    22d0:	00000206 	br	22dc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    22d4:	e0bffc17 	ldw	r2,-16(fp)
    22d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    22dc:	e0bffc17 	ldw	r2,-16(fp)
    22e0:	d0e00704 	addi	r3,gp,-32740
    22e4:	e0fffa15 	stw	r3,-24(fp)
    22e8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    22ec:	e0bffb17 	ldw	r2,-20(fp)
    22f0:	e0fffa17 	ldw	r3,-24(fp)
    22f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    22f8:	e0bffa17 	ldw	r2,-24(fp)
    22fc:	10c00017 	ldw	r3,0(r2)
    2300:	e0bffb17 	ldw	r2,-20(fp)
    2304:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2308:	e0bffa17 	ldw	r2,-24(fp)
    230c:	10800017 	ldw	r2,0(r2)
    2310:	e0fffb17 	ldw	r3,-20(fp)
    2314:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2318:	e0bffa17 	ldw	r2,-24(fp)
    231c:	e0fffb17 	ldw	r3,-20(fp)
    2320:	10c00015 	stw	r3,0(r2)
    2324:	e0bff817 	ldw	r2,-32(fp)
    2328:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    232c:	e0bff717 	ldw	r2,-36(fp)
    2330:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2334:	0005883a 	mov	r2,zero
    2338:	00000306 	br	2348 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    233c:	00bffa84 	movi	r2,-22
    2340:	00000106 	br	2348 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    2344:	00bfde84 	movi	r2,-134
  }
}
    2348:	e037883a 	mov	sp,fp
    234c:	df000017 	ldw	fp,0(sp)
    2350:	dec00104 	addi	sp,sp,4
    2354:	f800283a 	ret

00002358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2358:	defffe04 	addi	sp,sp,-8
    235c:	dfc00115 	stw	ra,4(sp)
    2360:	df000015 	stw	fp,0(sp)
    2364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2368:	d0a00517 	ldw	r2,-32748(gp)
    236c:	10000326 	beq	r2,zero,237c <alt_get_errno+0x24>
    2370:	d0a00517 	ldw	r2,-32748(gp)
    2374:	103ee83a 	callr	r2
    2378:	00000106 	br	2380 <alt_get_errno+0x28>
    237c:	d0a01204 	addi	r2,gp,-32696
}
    2380:	e037883a 	mov	sp,fp
    2384:	dfc00117 	ldw	ra,4(sp)
    2388:	df000017 	ldw	fp,0(sp)
    238c:	dec00204 	addi	sp,sp,8
    2390:	f800283a 	ret

00002394 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2394:	defffb04 	addi	sp,sp,-20
    2398:	dfc00415 	stw	ra,16(sp)
    239c:	df000315 	stw	fp,12(sp)
    23a0:	df000304 	addi	fp,sp,12
    23a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    23a8:	e0bfff17 	ldw	r2,-4(fp)
    23ac:	10000616 	blt	r2,zero,23c8 <close+0x34>
    23b0:	e0bfff17 	ldw	r2,-4(fp)
    23b4:	10c00324 	muli	r3,r2,12
    23b8:	00900034 	movhi	r2,16384
    23bc:	1084dc04 	addi	r2,r2,4976
    23c0:	1885883a 	add	r2,r3,r2
    23c4:	00000106 	br	23cc <close+0x38>
    23c8:	0005883a 	mov	r2,zero
    23cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    23d0:	e0bffd17 	ldw	r2,-12(fp)
    23d4:	10001926 	beq	r2,zero,243c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    23d8:	e0bffd17 	ldw	r2,-12(fp)
    23dc:	10800017 	ldw	r2,0(r2)
    23e0:	10800417 	ldw	r2,16(r2)
    23e4:	10000626 	beq	r2,zero,2400 <close+0x6c>
    23e8:	e0bffd17 	ldw	r2,-12(fp)
    23ec:	10800017 	ldw	r2,0(r2)
    23f0:	10800417 	ldw	r2,16(r2)
    23f4:	e13ffd17 	ldw	r4,-12(fp)
    23f8:	103ee83a 	callr	r2
    23fc:	00000106 	br	2404 <close+0x70>
    2400:	0005883a 	mov	r2,zero
    2404:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2408:	e13fff17 	ldw	r4,-4(fp)
    240c:	0002c280 	call	2c28 <alt_release_fd>
    if (rval < 0)
    2410:	e0bffe17 	ldw	r2,-8(fp)
    2414:	1000070e 	bge	r2,zero,2434 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    2418:	00023580 	call	2358 <alt_get_errno>
    241c:	1007883a 	mov	r3,r2
    2420:	e0bffe17 	ldw	r2,-8(fp)
    2424:	0085c83a 	sub	r2,zero,r2
    2428:	18800015 	stw	r2,0(r3)
      return -1;
    242c:	00bfffc4 	movi	r2,-1
    2430:	00000706 	br	2450 <close+0xbc>
    }
    return 0;
    2434:	0005883a 	mov	r2,zero
    2438:	00000506 	br	2450 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    243c:	00023580 	call	2358 <alt_get_errno>
    2440:	1007883a 	mov	r3,r2
    2444:	00801444 	movi	r2,81
    2448:	18800015 	stw	r2,0(r3)
    return -1;
    244c:	00bfffc4 	movi	r2,-1
  }
}
    2450:	e037883a 	mov	sp,fp
    2454:	dfc00117 	ldw	ra,4(sp)
    2458:	df000017 	ldw	fp,0(sp)
    245c:	dec00204 	addi	sp,sp,8
    2460:	f800283a 	ret

00002464 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2464:	deffff04 	addi	sp,sp,-4
    2468:	df000015 	stw	fp,0(sp)
    246c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2470:	0001883a 	nop
    2474:	e037883a 	mov	sp,fp
    2478:	df000017 	ldw	fp,0(sp)
    247c:	dec00104 	addi	sp,sp,4
    2480:	f800283a 	ret

00002484 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2484:	defffc04 	addi	sp,sp,-16
    2488:	df000315 	stw	fp,12(sp)
    248c:	df000304 	addi	fp,sp,12
    2490:	e13ffd15 	stw	r4,-12(fp)
    2494:	e17ffe15 	stw	r5,-8(fp)
    2498:	e1bfff15 	stw	r6,-4(fp)
  return len;
    249c:	e0bfff17 	ldw	r2,-4(fp)
}
    24a0:	e037883a 	mov	sp,fp
    24a4:	df000017 	ldw	fp,0(sp)
    24a8:	dec00104 	addi	sp,sp,4
    24ac:	f800283a 	ret

000024b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    24b0:	defffe04 	addi	sp,sp,-8
    24b4:	dfc00115 	stw	ra,4(sp)
    24b8:	df000015 	stw	fp,0(sp)
    24bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    24c0:	d0a00517 	ldw	r2,-32748(gp)
    24c4:	10000326 	beq	r2,zero,24d4 <alt_get_errno+0x24>
    24c8:	d0a00517 	ldw	r2,-32748(gp)
    24cc:	103ee83a 	callr	r2
    24d0:	00000106 	br	24d8 <alt_get_errno+0x28>
    24d4:	d0a01204 	addi	r2,gp,-32696
}
    24d8:	e037883a 	mov	sp,fp
    24dc:	dfc00117 	ldw	ra,4(sp)
    24e0:	df000017 	ldw	fp,0(sp)
    24e4:	dec00204 	addi	sp,sp,8
    24e8:	f800283a 	ret

000024ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    24ec:	defffa04 	addi	sp,sp,-24
    24f0:	dfc00515 	stw	ra,20(sp)
    24f4:	df000415 	stw	fp,16(sp)
    24f8:	df000404 	addi	fp,sp,16
    24fc:	e13ffe15 	stw	r4,-8(fp)
    2500:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2504:	e0bffe17 	ldw	r2,-8(fp)
    2508:	10000326 	beq	r2,zero,2518 <alt_dev_llist_insert+0x2c>
    250c:	e0bffe17 	ldw	r2,-8(fp)
    2510:	10800217 	ldw	r2,8(r2)
    2514:	1000061e 	bne	r2,zero,2530 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    2518:	00024b00 	call	24b0 <alt_get_errno>
    251c:	1007883a 	mov	r3,r2
    2520:	00800584 	movi	r2,22
    2524:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2528:	00bffa84 	movi	r2,-22
    252c:	00001306 	br	257c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2530:	e0bffe17 	ldw	r2,-8(fp)
    2534:	e0ffff17 	ldw	r3,-4(fp)
    2538:	e0fffc15 	stw	r3,-16(fp)
    253c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2540:	e0bffd17 	ldw	r2,-12(fp)
    2544:	e0fffc17 	ldw	r3,-16(fp)
    2548:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    254c:	e0bffc17 	ldw	r2,-16(fp)
    2550:	10c00017 	ldw	r3,0(r2)
    2554:	e0bffd17 	ldw	r2,-12(fp)
    2558:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    255c:	e0bffc17 	ldw	r2,-16(fp)
    2560:	10800017 	ldw	r2,0(r2)
    2564:	e0fffd17 	ldw	r3,-12(fp)
    2568:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    256c:	e0bffc17 	ldw	r2,-16(fp)
    2570:	e0fffd17 	ldw	r3,-12(fp)
    2574:	10c00015 	stw	r3,0(r2)

  return 0;  
    2578:	0005883a 	mov	r2,zero
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2590:	defffd04 	addi	sp,sp,-12
    2594:	dfc00215 	stw	ra,8(sp)
    2598:	df000115 	stw	fp,4(sp)
    259c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    25a0:	00800034 	movhi	r2,0
    25a4:	108dde04 	addi	r2,r2,14200
    25a8:	e0bfff15 	stw	r2,-4(fp)
    25ac:	00000606 	br	25c8 <_do_ctors+0x38>
        (*ctor) (); 
    25b0:	e0bfff17 	ldw	r2,-4(fp)
    25b4:	10800017 	ldw	r2,0(r2)
    25b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    25bc:	e0bfff17 	ldw	r2,-4(fp)
    25c0:	10bfff04 	addi	r2,r2,-4
    25c4:	e0bfff15 	stw	r2,-4(fp)
    25c8:	e0ffff17 	ldw	r3,-4(fp)
    25cc:	00800034 	movhi	r2,0
    25d0:	108ddf04 	addi	r2,r2,14204
    25d4:	18bff62e 	bgeu	r3,r2,25b0 <__alt_data_end+0x800025b0>
        (*ctor) (); 
}
    25d8:	0001883a 	nop
    25dc:	e037883a 	mov	sp,fp
    25e0:	dfc00117 	ldw	ra,4(sp)
    25e4:	df000017 	ldw	fp,0(sp)
    25e8:	dec00204 	addi	sp,sp,8
    25ec:	f800283a 	ret

000025f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    25f0:	defffd04 	addi	sp,sp,-12
    25f4:	dfc00215 	stw	ra,8(sp)
    25f8:	df000115 	stw	fp,4(sp)
    25fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2600:	00800034 	movhi	r2,0
    2604:	108dde04 	addi	r2,r2,14200
    2608:	e0bfff15 	stw	r2,-4(fp)
    260c:	00000606 	br	2628 <_do_dtors+0x38>
        (*dtor) (); 
    2610:	e0bfff17 	ldw	r2,-4(fp)
    2614:	10800017 	ldw	r2,0(r2)
    2618:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    261c:	e0bfff17 	ldw	r2,-4(fp)
    2620:	10bfff04 	addi	r2,r2,-4
    2624:	e0bfff15 	stw	r2,-4(fp)
    2628:	e0ffff17 	ldw	r3,-4(fp)
    262c:	00800034 	movhi	r2,0
    2630:	108ddf04 	addi	r2,r2,14204
    2634:	18bff62e 	bgeu	r3,r2,2610 <__alt_data_end+0x80002610>
        (*dtor) (); 
}
    2638:	0001883a 	nop
    263c:	e037883a 	mov	sp,fp
    2640:	dfc00117 	ldw	ra,4(sp)
    2644:	df000017 	ldw	fp,0(sp)
    2648:	dec00204 	addi	sp,sp,8
    264c:	f800283a 	ret

00002650 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2650:	defffa04 	addi	sp,sp,-24
    2654:	dfc00515 	stw	ra,20(sp)
    2658:	df000415 	stw	fp,16(sp)
    265c:	df000404 	addi	fp,sp,16
    2660:	e13ffe15 	stw	r4,-8(fp)
    2664:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2668:	e0bfff17 	ldw	r2,-4(fp)
    266c:	10800017 	ldw	r2,0(r2)
    2670:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2674:	e13ffe17 	ldw	r4,-8(fp)
    2678:	00034180 	call	3418 <strlen>
    267c:	10800044 	addi	r2,r2,1
    2680:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2684:	00000d06 	br	26bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2688:	e0bffc17 	ldw	r2,-16(fp)
    268c:	10800217 	ldw	r2,8(r2)
    2690:	e0fffd17 	ldw	r3,-12(fp)
    2694:	180d883a 	mov	r6,r3
    2698:	e17ffe17 	ldw	r5,-8(fp)
    269c:	1009883a 	mov	r4,r2
    26a0:	00031780 	call	3178 <memcmp>
    26a4:	1000021e 	bne	r2,zero,26b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    26a8:	e0bffc17 	ldw	r2,-16(fp)
    26ac:	00000706 	br	26cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    26b0:	e0bffc17 	ldw	r2,-16(fp)
    26b4:	10800017 	ldw	r2,0(r2)
    26b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    26bc:	e0fffc17 	ldw	r3,-16(fp)
    26c0:	e0bfff17 	ldw	r2,-4(fp)
    26c4:	18bff01e 	bne	r3,r2,2688 <__alt_data_end+0x80002688>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    26c8:	0005883a 	mov	r2,zero
}
    26cc:	e037883a 	mov	sp,fp
    26d0:	dfc00117 	ldw	ra,4(sp)
    26d4:	df000017 	ldw	fp,0(sp)
    26d8:	dec00204 	addi	sp,sp,8
    26dc:	f800283a 	ret

000026e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    26e0:	defffe04 	addi	sp,sp,-8
    26e4:	dfc00115 	stw	ra,4(sp)
    26e8:	df000015 	stw	fp,0(sp)
    26ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    26f0:	01440004 	movi	r5,4096
    26f4:	0009883a 	mov	r4,zero
    26f8:	00030000 	call	3000 <alt_icache_flush>
#endif
}
    26fc:	0001883a 	nop
    2700:	e037883a 	mov	sp,fp
    2704:	dfc00117 	ldw	ra,4(sp)
    2708:	df000017 	ldw	fp,0(sp)
    270c:	dec00204 	addi	sp,sp,8
    2710:	f800283a 	ret

00002714 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2714:	defff904 	addi	sp,sp,-28
    2718:	dfc00615 	stw	ra,24(sp)
    271c:	df000515 	stw	fp,20(sp)
    2720:	df000504 	addi	fp,sp,20
    2724:	e13ffc15 	stw	r4,-16(fp)
    2728:	e17ffd15 	stw	r5,-12(fp)
    272c:	e1bffe15 	stw	r6,-8(fp)
    2730:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2734:	e1bfff17 	ldw	r6,-4(fp)
    2738:	e17ffe17 	ldw	r5,-8(fp)
    273c:	e13ffd17 	ldw	r4,-12(fp)
    2740:	0002ad40 	call	2ad4 <open>
    2744:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2748:	e0bffb17 	ldw	r2,-20(fp)
    274c:	10001c16 	blt	r2,zero,27c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    2750:	00900034 	movhi	r2,16384
    2754:	1084dc04 	addi	r2,r2,4976
    2758:	e0fffb17 	ldw	r3,-20(fp)
    275c:	18c00324 	muli	r3,r3,12
    2760:	10c5883a 	add	r2,r2,r3
    2764:	10c00017 	ldw	r3,0(r2)
    2768:	e0bffc17 	ldw	r2,-16(fp)
    276c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2770:	00900034 	movhi	r2,16384
    2774:	1084dc04 	addi	r2,r2,4976
    2778:	e0fffb17 	ldw	r3,-20(fp)
    277c:	18c00324 	muli	r3,r3,12
    2780:	10c5883a 	add	r2,r2,r3
    2784:	10800104 	addi	r2,r2,4
    2788:	10c00017 	ldw	r3,0(r2)
    278c:	e0bffc17 	ldw	r2,-16(fp)
    2790:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2794:	00900034 	movhi	r2,16384
    2798:	1084dc04 	addi	r2,r2,4976
    279c:	e0fffb17 	ldw	r3,-20(fp)
    27a0:	18c00324 	muli	r3,r3,12
    27a4:	10c5883a 	add	r2,r2,r3
    27a8:	10800204 	addi	r2,r2,8
    27ac:	10c00017 	ldw	r3,0(r2)
    27b0:	e0bffc17 	ldw	r2,-16(fp)
    27b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    27b8:	e13ffb17 	ldw	r4,-20(fp)
    27bc:	0002c280 	call	2c28 <alt_release_fd>
  }
} 
    27c0:	0001883a 	nop
    27c4:	e037883a 	mov	sp,fp
    27c8:	dfc00117 	ldw	ra,4(sp)
    27cc:	df000017 	ldw	fp,0(sp)
    27d0:	dec00204 	addi	sp,sp,8
    27d4:	f800283a 	ret

000027d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    27d8:	defffb04 	addi	sp,sp,-20
    27dc:	dfc00415 	stw	ra,16(sp)
    27e0:	df000315 	stw	fp,12(sp)
    27e4:	df000304 	addi	fp,sp,12
    27e8:	e13ffd15 	stw	r4,-12(fp)
    27ec:	e17ffe15 	stw	r5,-8(fp)
    27f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    27f4:	01c07fc4 	movi	r7,511
    27f8:	01800044 	movi	r6,1
    27fc:	e17ffd17 	ldw	r5,-12(fp)
    2800:	01100034 	movhi	r4,16384
    2804:	2104df04 	addi	r4,r4,4988
    2808:	00027140 	call	2714 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    280c:	01c07fc4 	movi	r7,511
    2810:	000d883a 	mov	r6,zero
    2814:	e17ffe17 	ldw	r5,-8(fp)
    2818:	01100034 	movhi	r4,16384
    281c:	2104dc04 	addi	r4,r4,4976
    2820:	00027140 	call	2714 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2824:	01c07fc4 	movi	r7,511
    2828:	01800044 	movi	r6,1
    282c:	e17fff17 	ldw	r5,-4(fp)
    2830:	01100034 	movhi	r4,16384
    2834:	2104e204 	addi	r4,r4,5000
    2838:	00027140 	call	2714 <alt_open_fd>
}  
    283c:	0001883a 	nop
    2840:	e037883a 	mov	sp,fp
    2844:	dfc00117 	ldw	ra,4(sp)
    2848:	df000017 	ldw	fp,0(sp)
    284c:	dec00204 	addi	sp,sp,8
    2850:	f800283a 	ret

00002854 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    2854:	defff004 	addi	sp,sp,-64
    2858:	df000f15 	stw	fp,60(sp)
    285c:	df000f04 	addi	fp,sp,60
    2860:	e13ffd15 	stw	r4,-12(fp)
    2864:	e17ffe15 	stw	r5,-8(fp)
    2868:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    286c:	00bffa84 	movi	r2,-22
    2870:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	10800828 	cmpgeui	r2,r2,32
    287c:	1000501e 	bne	r2,zero,29c0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2880:	0005303a 	rdctl	r2,status
    2884:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2888:	e0fff617 	ldw	r3,-40(fp)
    288c:	00bfff84 	movi	r2,-2
    2890:	1884703a 	and	r2,r3,r2
    2894:	1001703a 	wrctl	status,r2
  
  return context;
    2898:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    289c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    28a0:	00900034 	movhi	r2,16384
    28a4:	10865804 	addi	r2,r2,6496
    28a8:	e0fffd17 	ldw	r3,-12(fp)
    28ac:	180690fa 	slli	r3,r3,3
    28b0:	10c5883a 	add	r2,r2,r3
    28b4:	e0ffff17 	ldw	r3,-4(fp)
    28b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    28bc:	00900034 	movhi	r2,16384
    28c0:	10865804 	addi	r2,r2,6496
    28c4:	e0fffd17 	ldw	r3,-12(fp)
    28c8:	180690fa 	slli	r3,r3,3
    28cc:	10c5883a 	add	r2,r2,r3
    28d0:	10800104 	addi	r2,r2,4
    28d4:	e0fffe17 	ldw	r3,-8(fp)
    28d8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    28dc:	e0bfff17 	ldw	r2,-4(fp)
    28e0:	10001926 	beq	r2,zero,2948 <alt_irq_register+0xf4>
    28e4:	e0bffd17 	ldw	r2,-12(fp)
    28e8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28ec:	0005303a 	rdctl	r2,status
    28f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28f4:	e0fff717 	ldw	r3,-36(fp)
    28f8:	00bfff84 	movi	r2,-2
    28fc:	1884703a 	and	r2,r3,r2
    2900:	1001703a 	wrctl	status,r2
  
  return context;
    2904:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2908:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    290c:	00c00044 	movi	r3,1
    2910:	e0bff217 	ldw	r2,-56(fp)
    2914:	1884983a 	sll	r2,r3,r2
    2918:	1007883a 	mov	r3,r2
    291c:	d0a00e17 	ldw	r2,-32712(gp)
    2920:	1884b03a 	or	r2,r3,r2
    2924:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2928:	d0a00e17 	ldw	r2,-32712(gp)
    292c:	100170fa 	wrctl	ienable,r2
    2930:	e0bff817 	ldw	r2,-32(fp)
    2934:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2938:	e0bff917 	ldw	r2,-28(fp)
    293c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2940:	0005883a 	mov	r2,zero
    2944:	00001906 	br	29ac <alt_irq_register+0x158>
    2948:	e0bffd17 	ldw	r2,-12(fp)
    294c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2950:	0005303a 	rdctl	r2,status
    2954:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2958:	e0fffa17 	ldw	r3,-24(fp)
    295c:	00bfff84 	movi	r2,-2
    2960:	1884703a 	and	r2,r3,r2
    2964:	1001703a 	wrctl	status,r2
  
  return context;
    2968:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    296c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    2970:	00c00044 	movi	r3,1
    2974:	e0bff417 	ldw	r2,-48(fp)
    2978:	1884983a 	sll	r2,r3,r2
    297c:	0084303a 	nor	r2,zero,r2
    2980:	1007883a 	mov	r3,r2
    2984:	d0a00e17 	ldw	r2,-32712(gp)
    2988:	1884703a 	and	r2,r3,r2
    298c:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2990:	d0a00e17 	ldw	r2,-32712(gp)
    2994:	100170fa 	wrctl	ienable,r2
    2998:	e0bffb17 	ldw	r2,-20(fp)
    299c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    29a0:	e0bffc17 	ldw	r2,-16(fp)
    29a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    29a8:	0005883a 	mov	r2,zero
    29ac:	e0bff115 	stw	r2,-60(fp)
    29b0:	e0bff317 	ldw	r2,-52(fp)
    29b4:	e0bff515 	stw	r2,-44(fp)
    29b8:	e0bff517 	ldw	r2,-44(fp)
    29bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    29c0:	e0bff117 	ldw	r2,-60(fp)
}
    29c4:	e037883a 	mov	sp,fp
    29c8:	df000017 	ldw	fp,0(sp)
    29cc:	dec00104 	addi	sp,sp,4
    29d0:	f800283a 	ret

000029d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    29d4:	defffe04 	addi	sp,sp,-8
    29d8:	dfc00115 	stw	ra,4(sp)
    29dc:	df000015 	stw	fp,0(sp)
    29e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    29e4:	d0a00517 	ldw	r2,-32748(gp)
    29e8:	10000326 	beq	r2,zero,29f8 <alt_get_errno+0x24>
    29ec:	d0a00517 	ldw	r2,-32748(gp)
    29f0:	103ee83a 	callr	r2
    29f4:	00000106 	br	29fc <alt_get_errno+0x28>
    29f8:	d0a01204 	addi	r2,gp,-32696
}
    29fc:	e037883a 	mov	sp,fp
    2a00:	dfc00117 	ldw	ra,4(sp)
    2a04:	df000017 	ldw	fp,0(sp)
    2a08:	dec00204 	addi	sp,sp,8
    2a0c:	f800283a 	ret

00002a10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2a10:	defffd04 	addi	sp,sp,-12
    2a14:	df000215 	stw	fp,8(sp)
    2a18:	df000204 	addi	fp,sp,8
    2a1c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2a20:	e0bfff17 	ldw	r2,-4(fp)
    2a24:	10800217 	ldw	r2,8(r2)
    2a28:	10d00034 	orhi	r3,r2,16384
    2a2c:	e0bfff17 	ldw	r2,-4(fp)
    2a30:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2a34:	e03ffe15 	stw	zero,-8(fp)
    2a38:	00001d06 	br	2ab0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2a3c:	00900034 	movhi	r2,16384
    2a40:	1084dc04 	addi	r2,r2,4976
    2a44:	e0fffe17 	ldw	r3,-8(fp)
    2a48:	18c00324 	muli	r3,r3,12
    2a4c:	10c5883a 	add	r2,r2,r3
    2a50:	10c00017 	ldw	r3,0(r2)
    2a54:	e0bfff17 	ldw	r2,-4(fp)
    2a58:	10800017 	ldw	r2,0(r2)
    2a5c:	1880111e 	bne	r3,r2,2aa4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2a60:	00900034 	movhi	r2,16384
    2a64:	1084dc04 	addi	r2,r2,4976
    2a68:	e0fffe17 	ldw	r3,-8(fp)
    2a6c:	18c00324 	muli	r3,r3,12
    2a70:	10c5883a 	add	r2,r2,r3
    2a74:	10800204 	addi	r2,r2,8
    2a78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2a7c:	1000090e 	bge	r2,zero,2aa4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    2a80:	e0bffe17 	ldw	r2,-8(fp)
    2a84:	10c00324 	muli	r3,r2,12
    2a88:	00900034 	movhi	r2,16384
    2a8c:	1084dc04 	addi	r2,r2,4976
    2a90:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2a94:	e0bfff17 	ldw	r2,-4(fp)
    2a98:	18800226 	beq	r3,r2,2aa4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2a9c:	00bffcc4 	movi	r2,-13
    2aa0:	00000806 	br	2ac4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2aa4:	e0bffe17 	ldw	r2,-8(fp)
    2aa8:	10800044 	addi	r2,r2,1
    2aac:	e0bffe15 	stw	r2,-8(fp)
    2ab0:	d0a00417 	ldw	r2,-32752(gp)
    2ab4:	1007883a 	mov	r3,r2
    2ab8:	e0bffe17 	ldw	r2,-8(fp)
    2abc:	18bfdf2e 	bgeu	r3,r2,2a3c <__alt_data_end+0x80002a3c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2ac0:	0005883a 	mov	r2,zero
}
    2ac4:	e037883a 	mov	sp,fp
    2ac8:	df000017 	ldw	fp,0(sp)
    2acc:	dec00104 	addi	sp,sp,4
    2ad0:	f800283a 	ret

00002ad4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2ad4:	defff604 	addi	sp,sp,-40
    2ad8:	dfc00915 	stw	ra,36(sp)
    2adc:	df000815 	stw	fp,32(sp)
    2ae0:	df000804 	addi	fp,sp,32
    2ae4:	e13ffd15 	stw	r4,-12(fp)
    2ae8:	e17ffe15 	stw	r5,-8(fp)
    2aec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2af0:	00bfffc4 	movi	r2,-1
    2af4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    2af8:	00bffb44 	movi	r2,-19
    2afc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    2b00:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2b04:	d1600204 	addi	r5,gp,-32760
    2b08:	e13ffd17 	ldw	r4,-12(fp)
    2b0c:	00026500 	call	2650 <alt_find_dev>
    2b10:	e0bff815 	stw	r2,-32(fp)
    2b14:	e0bff817 	ldw	r2,-32(fp)
    2b18:	1000051e 	bne	r2,zero,2b30 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2b1c:	e13ffd17 	ldw	r4,-12(fp)
    2b20:	0002e540 	call	2e54 <alt_find_file>
    2b24:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    2b28:	00800044 	movi	r2,1
    2b2c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2b30:	e0bff817 	ldw	r2,-32(fp)
    2b34:	10002926 	beq	r2,zero,2bdc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2b38:	e13ff817 	ldw	r4,-32(fp)
    2b3c:	0002f5c0 	call	2f5c <alt_get_fd>
    2b40:	e0bff915 	stw	r2,-28(fp)
    2b44:	e0bff917 	ldw	r2,-28(fp)
    2b48:	1000030e 	bge	r2,zero,2b58 <open+0x84>
    {
      status = index;
    2b4c:	e0bff917 	ldw	r2,-28(fp)
    2b50:	e0bffa15 	stw	r2,-24(fp)
    2b54:	00002306 	br	2be4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    2b58:	e0bff917 	ldw	r2,-28(fp)
    2b5c:	10c00324 	muli	r3,r2,12
    2b60:	00900034 	movhi	r2,16384
    2b64:	1084dc04 	addi	r2,r2,4976
    2b68:	1885883a 	add	r2,r3,r2
    2b6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2b70:	e0fffe17 	ldw	r3,-8(fp)
    2b74:	00900034 	movhi	r2,16384
    2b78:	10bfffc4 	addi	r2,r2,-1
    2b7c:	1886703a 	and	r3,r3,r2
    2b80:	e0bffc17 	ldw	r2,-16(fp)
    2b84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2b88:	e0bffb17 	ldw	r2,-20(fp)
    2b8c:	1000051e 	bne	r2,zero,2ba4 <open+0xd0>
    2b90:	e13ffc17 	ldw	r4,-16(fp)
    2b94:	0002a100 	call	2a10 <alt_file_locked>
    2b98:	e0bffa15 	stw	r2,-24(fp)
    2b9c:	e0bffa17 	ldw	r2,-24(fp)
    2ba0:	10001016 	blt	r2,zero,2be4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2ba4:	e0bff817 	ldw	r2,-32(fp)
    2ba8:	10800317 	ldw	r2,12(r2)
    2bac:	10000826 	beq	r2,zero,2bd0 <open+0xfc>
    2bb0:	e0bff817 	ldw	r2,-32(fp)
    2bb4:	10800317 	ldw	r2,12(r2)
    2bb8:	e1ffff17 	ldw	r7,-4(fp)
    2bbc:	e1bffe17 	ldw	r6,-8(fp)
    2bc0:	e17ffd17 	ldw	r5,-12(fp)
    2bc4:	e13ffc17 	ldw	r4,-16(fp)
    2bc8:	103ee83a 	callr	r2
    2bcc:	00000106 	br	2bd4 <open+0x100>
    2bd0:	0005883a 	mov	r2,zero
    2bd4:	e0bffa15 	stw	r2,-24(fp)
    2bd8:	00000206 	br	2be4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2bdc:	00bffb44 	movi	r2,-19
    2be0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2be4:	e0bffa17 	ldw	r2,-24(fp)
    2be8:	1000090e 	bge	r2,zero,2c10 <open+0x13c>
  {
    alt_release_fd (index);  
    2bec:	e13ff917 	ldw	r4,-28(fp)
    2bf0:	0002c280 	call	2c28 <alt_release_fd>
    ALT_ERRNO = -status;
    2bf4:	00029d40 	call	29d4 <alt_get_errno>
    2bf8:	1007883a 	mov	r3,r2
    2bfc:	e0bffa17 	ldw	r2,-24(fp)
    2c00:	0085c83a 	sub	r2,zero,r2
    2c04:	18800015 	stw	r2,0(r3)
    return -1;
    2c08:	00bfffc4 	movi	r2,-1
    2c0c:	00000106 	br	2c14 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    2c10:	e0bff917 	ldw	r2,-28(fp)
}
    2c14:	e037883a 	mov	sp,fp
    2c18:	dfc00117 	ldw	ra,4(sp)
    2c1c:	df000017 	ldw	fp,0(sp)
    2c20:	dec00204 	addi	sp,sp,8
    2c24:	f800283a 	ret

00002c28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2c28:	defffe04 	addi	sp,sp,-8
    2c2c:	df000115 	stw	fp,4(sp)
    2c30:	df000104 	addi	fp,sp,4
    2c34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2c38:	e0bfff17 	ldw	r2,-4(fp)
    2c3c:	108000d0 	cmplti	r2,r2,3
    2c40:	10000d1e 	bne	r2,zero,2c78 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2c44:	00900034 	movhi	r2,16384
    2c48:	1084dc04 	addi	r2,r2,4976
    2c4c:	e0ffff17 	ldw	r3,-4(fp)
    2c50:	18c00324 	muli	r3,r3,12
    2c54:	10c5883a 	add	r2,r2,r3
    2c58:	10800204 	addi	r2,r2,8
    2c5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2c60:	00900034 	movhi	r2,16384
    2c64:	1084dc04 	addi	r2,r2,4976
    2c68:	e0ffff17 	ldw	r3,-4(fp)
    2c6c:	18c00324 	muli	r3,r3,12
    2c70:	10c5883a 	add	r2,r2,r3
    2c74:	10000015 	stw	zero,0(r2)
  }
}
    2c78:	0001883a 	nop
    2c7c:	e037883a 	mov	sp,fp
    2c80:	df000017 	ldw	fp,0(sp)
    2c84:	dec00104 	addi	sp,sp,4
    2c88:	f800283a 	ret

00002c8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2c8c:	defffa04 	addi	sp,sp,-24
    2c90:	df000515 	stw	fp,20(sp)
    2c94:	df000504 	addi	fp,sp,20
    2c98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c9c:	0005303a 	rdctl	r2,status
    2ca0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ca4:	e0fffc17 	ldw	r3,-16(fp)
    2ca8:	00bfff84 	movi	r2,-2
    2cac:	1884703a 	and	r2,r3,r2
    2cb0:	1001703a 	wrctl	status,r2
  
  return context;
    2cb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2cb8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2cbc:	e0bfff17 	ldw	r2,-4(fp)
    2cc0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2cc4:	e0bffd17 	ldw	r2,-12(fp)
    2cc8:	10800017 	ldw	r2,0(r2)
    2ccc:	e0fffd17 	ldw	r3,-12(fp)
    2cd0:	18c00117 	ldw	r3,4(r3)
    2cd4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    2cd8:	e0bffd17 	ldw	r2,-12(fp)
    2cdc:	10800117 	ldw	r2,4(r2)
    2ce0:	e0fffd17 	ldw	r3,-12(fp)
    2ce4:	18c00017 	ldw	r3,0(r3)
    2ce8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2cec:	e0bffd17 	ldw	r2,-12(fp)
    2cf0:	e0fffd17 	ldw	r3,-12(fp)
    2cf4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    2cf8:	e0bffd17 	ldw	r2,-12(fp)
    2cfc:	e0fffd17 	ldw	r3,-12(fp)
    2d00:	10c00015 	stw	r3,0(r2)
    2d04:	e0bffb17 	ldw	r2,-20(fp)
    2d08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d0c:	e0bffe17 	ldw	r2,-8(fp)
    2d10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2d14:	0001883a 	nop
    2d18:	e037883a 	mov	sp,fp
    2d1c:	df000017 	ldw	fp,0(sp)
    2d20:	dec00104 	addi	sp,sp,4
    2d24:	f800283a 	ret

00002d28 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2d28:	defffb04 	addi	sp,sp,-20
    2d2c:	dfc00415 	stw	ra,16(sp)
    2d30:	df000315 	stw	fp,12(sp)
    2d34:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2d38:	d0a00717 	ldw	r2,-32740(gp)
    2d3c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2d40:	d0a01017 	ldw	r2,-32704(gp)
    2d44:	10800044 	addi	r2,r2,1
    2d48:	d0a01015 	stw	r2,-32704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2d4c:	00002e06 	br	2e08 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    2d50:	e0bffd17 	ldw	r2,-12(fp)
    2d54:	10800017 	ldw	r2,0(r2)
    2d58:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2d5c:	e0bffd17 	ldw	r2,-12(fp)
    2d60:	10800403 	ldbu	r2,16(r2)
    2d64:	10803fcc 	andi	r2,r2,255
    2d68:	10000426 	beq	r2,zero,2d7c <alt_tick+0x54>
    2d6c:	d0a01017 	ldw	r2,-32704(gp)
    2d70:	1000021e 	bne	r2,zero,2d7c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2d74:	e0bffd17 	ldw	r2,-12(fp)
    2d78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2d7c:	e0bffd17 	ldw	r2,-12(fp)
    2d80:	10800217 	ldw	r2,8(r2)
    2d84:	d0e01017 	ldw	r3,-32704(gp)
    2d88:	18801d36 	bltu	r3,r2,2e00 <alt_tick+0xd8>
    2d8c:	e0bffd17 	ldw	r2,-12(fp)
    2d90:	10800403 	ldbu	r2,16(r2)
    2d94:	10803fcc 	andi	r2,r2,255
    2d98:	1000191e 	bne	r2,zero,2e00 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2d9c:	e0bffd17 	ldw	r2,-12(fp)
    2da0:	10800317 	ldw	r2,12(r2)
    2da4:	e0fffd17 	ldw	r3,-12(fp)
    2da8:	18c00517 	ldw	r3,20(r3)
    2dac:	1809883a 	mov	r4,r3
    2db0:	103ee83a 	callr	r2
    2db4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2db8:	e0bfff17 	ldw	r2,-4(fp)
    2dbc:	1000031e 	bne	r2,zero,2dcc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    2dc0:	e13ffd17 	ldw	r4,-12(fp)
    2dc4:	0002c8c0 	call	2c8c <alt_alarm_stop>
    2dc8:	00000d06 	br	2e00 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    2dcc:	e0bffd17 	ldw	r2,-12(fp)
    2dd0:	10c00217 	ldw	r3,8(r2)
    2dd4:	e0bfff17 	ldw	r2,-4(fp)
    2dd8:	1887883a 	add	r3,r3,r2
    2ddc:	e0bffd17 	ldw	r2,-12(fp)
    2de0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2de4:	e0bffd17 	ldw	r2,-12(fp)
    2de8:	10c00217 	ldw	r3,8(r2)
    2dec:	d0a01017 	ldw	r2,-32704(gp)
    2df0:	1880032e 	bgeu	r3,r2,2e00 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    2df4:	e0bffd17 	ldw	r2,-12(fp)
    2df8:	00c00044 	movi	r3,1
    2dfc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    2e00:	e0bffe17 	ldw	r2,-8(fp)
    2e04:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2e08:	e0fffd17 	ldw	r3,-12(fp)
    2e0c:	d0a00704 	addi	r2,gp,-32740
    2e10:	18bfcf1e 	bne	r3,r2,2d50 <__alt_data_end+0x80002d50>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    2e14:	0001883a 	nop
}
    2e18:	0001883a 	nop
    2e1c:	e037883a 	mov	sp,fp
    2e20:	dfc00117 	ldw	ra,4(sp)
    2e24:	df000017 	ldw	fp,0(sp)
    2e28:	dec00204 	addi	sp,sp,8
    2e2c:	f800283a 	ret

00002e30 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    2e30:	deffff04 	addi	sp,sp,-4
    2e34:	df000015 	stw	fp,0(sp)
    2e38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2e3c:	000170fa 	wrctl	ienable,zero
}
    2e40:	0001883a 	nop
    2e44:	e037883a 	mov	sp,fp
    2e48:	df000017 	ldw	fp,0(sp)
    2e4c:	dec00104 	addi	sp,sp,4
    2e50:	f800283a 	ret

00002e54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2e54:	defffb04 	addi	sp,sp,-20
    2e58:	dfc00415 	stw	ra,16(sp)
    2e5c:	df000315 	stw	fp,12(sp)
    2e60:	df000304 	addi	fp,sp,12
    2e64:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2e68:	d0a00017 	ldw	r2,-32768(gp)
    2e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2e70:	00003106 	br	2f38 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    2e74:	e0bffd17 	ldw	r2,-12(fp)
    2e78:	10800217 	ldw	r2,8(r2)
    2e7c:	1009883a 	mov	r4,r2
    2e80:	00034180 	call	3418 <strlen>
    2e84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    2e88:	e0bffd17 	ldw	r2,-12(fp)
    2e8c:	10c00217 	ldw	r3,8(r2)
    2e90:	e0bffe17 	ldw	r2,-8(fp)
    2e94:	10bfffc4 	addi	r2,r2,-1
    2e98:	1885883a 	add	r2,r3,r2
    2e9c:	10800003 	ldbu	r2,0(r2)
    2ea0:	10803fcc 	andi	r2,r2,255
    2ea4:	1080201c 	xori	r2,r2,128
    2ea8:	10bfe004 	addi	r2,r2,-128
    2eac:	10800bd8 	cmpnei	r2,r2,47
    2eb0:	1000031e 	bne	r2,zero,2ec0 <alt_find_file+0x6c>
    {
      len -= 1;
    2eb4:	e0bffe17 	ldw	r2,-8(fp)
    2eb8:	10bfffc4 	addi	r2,r2,-1
    2ebc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2ec0:	e0bffe17 	ldw	r2,-8(fp)
    2ec4:	e0ffff17 	ldw	r3,-4(fp)
    2ec8:	1885883a 	add	r2,r3,r2
    2ecc:	10800003 	ldbu	r2,0(r2)
    2ed0:	10803fcc 	andi	r2,r2,255
    2ed4:	1080201c 	xori	r2,r2,128
    2ed8:	10bfe004 	addi	r2,r2,-128
    2edc:	10800be0 	cmpeqi	r2,r2,47
    2ee0:	1000081e 	bne	r2,zero,2f04 <alt_find_file+0xb0>
    2ee4:	e0bffe17 	ldw	r2,-8(fp)
    2ee8:	e0ffff17 	ldw	r3,-4(fp)
    2eec:	1885883a 	add	r2,r3,r2
    2ef0:	10800003 	ldbu	r2,0(r2)
    2ef4:	10803fcc 	andi	r2,r2,255
    2ef8:	1080201c 	xori	r2,r2,128
    2efc:	10bfe004 	addi	r2,r2,-128
    2f00:	10000a1e 	bne	r2,zero,2f2c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    2f04:	e0bffd17 	ldw	r2,-12(fp)
    2f08:	10800217 	ldw	r2,8(r2)
    2f0c:	e0fffe17 	ldw	r3,-8(fp)
    2f10:	180d883a 	mov	r6,r3
    2f14:	e17fff17 	ldw	r5,-4(fp)
    2f18:	1009883a 	mov	r4,r2
    2f1c:	00031780 	call	3178 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2f20:	1000021e 	bne	r2,zero,2f2c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2f24:	e0bffd17 	ldw	r2,-12(fp)
    2f28:	00000706 	br	2f48 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    2f2c:	e0bffd17 	ldw	r2,-12(fp)
    2f30:	10800017 	ldw	r2,0(r2)
    2f34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2f38:	e0fffd17 	ldw	r3,-12(fp)
    2f3c:	d0a00004 	addi	r2,gp,-32768
    2f40:	18bfcc1e 	bne	r3,r2,2e74 <__alt_data_end+0x80002e74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2f44:	0005883a 	mov	r2,zero
}
    2f48:	e037883a 	mov	sp,fp
    2f4c:	dfc00117 	ldw	ra,4(sp)
    2f50:	df000017 	ldw	fp,0(sp)
    2f54:	dec00204 	addi	sp,sp,8
    2f58:	f800283a 	ret

00002f5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2f5c:	defffc04 	addi	sp,sp,-16
    2f60:	df000315 	stw	fp,12(sp)
    2f64:	df000304 	addi	fp,sp,12
    2f68:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2f6c:	00bffa04 	movi	r2,-24
    2f70:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2f74:	e03ffd15 	stw	zero,-12(fp)
    2f78:	00001906 	br	2fe0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    2f7c:	00900034 	movhi	r2,16384
    2f80:	1084dc04 	addi	r2,r2,4976
    2f84:	e0fffd17 	ldw	r3,-12(fp)
    2f88:	18c00324 	muli	r3,r3,12
    2f8c:	10c5883a 	add	r2,r2,r3
    2f90:	10800017 	ldw	r2,0(r2)
    2f94:	10000f1e 	bne	r2,zero,2fd4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    2f98:	00900034 	movhi	r2,16384
    2f9c:	1084dc04 	addi	r2,r2,4976
    2fa0:	e0fffd17 	ldw	r3,-12(fp)
    2fa4:	18c00324 	muli	r3,r3,12
    2fa8:	10c5883a 	add	r2,r2,r3
    2fac:	e0ffff17 	ldw	r3,-4(fp)
    2fb0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2fb4:	d0e00417 	ldw	r3,-32752(gp)
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	1880020e 	bge	r3,r2,2fc8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    2fc0:	e0bffd17 	ldw	r2,-12(fp)
    2fc4:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    2fc8:	e0bffd17 	ldw	r2,-12(fp)
    2fcc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    2fd0:	00000606 	br	2fec <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2fd4:	e0bffd17 	ldw	r2,-12(fp)
    2fd8:	10800044 	addi	r2,r2,1
    2fdc:	e0bffd15 	stw	r2,-12(fp)
    2fe0:	e0bffd17 	ldw	r2,-12(fp)
    2fe4:	10800810 	cmplti	r2,r2,32
    2fe8:	103fe41e 	bne	r2,zero,2f7c <__alt_data_end+0x80002f7c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2fec:	e0bffe17 	ldw	r2,-8(fp)
}
    2ff0:	e037883a 	mov	sp,fp
    2ff4:	df000017 	ldw	fp,0(sp)
    2ff8:	dec00104 	addi	sp,sp,4
    2ffc:	f800283a 	ret

00003000 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3000:	defffb04 	addi	sp,sp,-20
    3004:	df000415 	stw	fp,16(sp)
    3008:	df000404 	addi	fp,sp,16
    300c:	e13ffe15 	stw	r4,-8(fp)
    3010:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	10840070 	cmpltui	r2,r2,4097
    301c:	1000021e 	bne	r2,zero,3028 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3020:	00840004 	movi	r2,4096
    3024:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3028:	e0fffe17 	ldw	r3,-8(fp)
    302c:	e0bfff17 	ldw	r2,-4(fp)
    3030:	1885883a 	add	r2,r3,r2
    3034:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3038:	e0bffe17 	ldw	r2,-8(fp)
    303c:	e0bffc15 	stw	r2,-16(fp)
    3040:	00000506 	br	3058 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3044:	e0bffc17 	ldw	r2,-16(fp)
    3048:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    304c:	e0bffc17 	ldw	r2,-16(fp)
    3050:	10800804 	addi	r2,r2,32
    3054:	e0bffc15 	stw	r2,-16(fp)
    3058:	e0fffc17 	ldw	r3,-16(fp)
    305c:	e0bffd17 	ldw	r2,-12(fp)
    3060:	18bff836 	bltu	r3,r2,3044 <__alt_data_end+0x80003044>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3064:	e0bffe17 	ldw	r2,-8(fp)
    3068:	108007cc 	andi	r2,r2,31
    306c:	10000226 	beq	r2,zero,3078 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3070:	e0bffc17 	ldw	r2,-16(fp)
    3074:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3078:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    307c:	0001883a 	nop
    3080:	e037883a 	mov	sp,fp
    3084:	df000017 	ldw	fp,0(sp)
    3088:	dec00104 	addi	sp,sp,4
    308c:	f800283a 	ret

00003090 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    3090:	defffe04 	addi	sp,sp,-8
    3094:	df000115 	stw	fp,4(sp)
    3098:	df000104 	addi	fp,sp,4
    309c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    30a0:	e0bfff17 	ldw	r2,-4(fp)
    30a4:	10bffe84 	addi	r2,r2,-6
    30a8:	10c00428 	cmpgeui	r3,r2,16
    30ac:	18001a1e 	bne	r3,zero,3118 <alt_exception_cause_generated_bad_addr+0x88>
    30b0:	100690ba 	slli	r3,r2,2
    30b4:	00800034 	movhi	r2,0
    30b8:	108c3204 	addi	r2,r2,12488
    30bc:	1885883a 	add	r2,r3,r2
    30c0:	10800017 	ldw	r2,0(r2)
    30c4:	1000683a 	jmp	r2
    30c8:	00003108 	cmpgei	zero,zero,196
    30cc:	00003108 	cmpgei	zero,zero,196
    30d0:	00003118 	cmpnei	zero,zero,196
    30d4:	00003118 	cmpnei	zero,zero,196
    30d8:	00003118 	cmpnei	zero,zero,196
    30dc:	00003108 	cmpgei	zero,zero,196
    30e0:	00003110 	cmplti	zero,zero,196
    30e4:	00003118 	cmpnei	zero,zero,196
    30e8:	00003108 	cmpgei	zero,zero,196
    30ec:	00003108 	cmpgei	zero,zero,196
    30f0:	00003118 	cmpnei	zero,zero,196
    30f4:	00003108 	cmpgei	zero,zero,196
    30f8:	00003110 	cmplti	zero,zero,196
    30fc:	00003118 	cmpnei	zero,zero,196
    3100:	00003118 	cmpnei	zero,zero,196
    3104:	00003108 	cmpgei	zero,zero,196
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    3108:	00800044 	movi	r2,1
    310c:	00000306 	br	311c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    3110:	0005883a 	mov	r2,zero
    3114:	00000106 	br	311c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    3118:	0005883a 	mov	r2,zero
  }
}
    311c:	e037883a 	mov	sp,fp
    3120:	df000017 	ldw	fp,0(sp)
    3124:	dec00104 	addi	sp,sp,4
    3128:	f800283a 	ret

0000312c <atexit>:
    312c:	200b883a 	mov	r5,r4
    3130:	000f883a 	mov	r7,zero
    3134:	000d883a 	mov	r6,zero
    3138:	0009883a 	mov	r4,zero
    313c:	00034b01 	jmpi	34b0 <__register_exitproc>

00003140 <exit>:
    3140:	defffe04 	addi	sp,sp,-8
    3144:	000b883a 	mov	r5,zero
    3148:	dc000015 	stw	r16,0(sp)
    314c:	dfc00115 	stw	ra,4(sp)
    3150:	2021883a 	mov	r16,r4
    3154:	00035c80 	call	35c8 <__call_exitprocs>
    3158:	00900034 	movhi	r2,16384
    315c:	10864e04 	addi	r2,r2,6456
    3160:	11000017 	ldw	r4,0(r2)
    3164:	20800f17 	ldw	r2,60(r4)
    3168:	10000126 	beq	r2,zero,3170 <exit+0x30>
    316c:	103ee83a 	callr	r2
    3170:	8009883a 	mov	r4,r16
    3174:	00037480 	call	3748 <_exit>

00003178 <memcmp>:
    3178:	01c000c4 	movi	r7,3
    317c:	3980192e 	bgeu	r7,r6,31e4 <memcmp+0x6c>
    3180:	2144b03a 	or	r2,r4,r5
    3184:	11c4703a 	and	r2,r2,r7
    3188:	10000f26 	beq	r2,zero,31c8 <memcmp+0x50>
    318c:	20800003 	ldbu	r2,0(r4)
    3190:	28c00003 	ldbu	r3,0(r5)
    3194:	10c0151e 	bne	r2,r3,31ec <memcmp+0x74>
    3198:	31bfff84 	addi	r6,r6,-2
    319c:	01ffffc4 	movi	r7,-1
    31a0:	00000406 	br	31b4 <memcmp+0x3c>
    31a4:	20800003 	ldbu	r2,0(r4)
    31a8:	28c00003 	ldbu	r3,0(r5)
    31ac:	31bfffc4 	addi	r6,r6,-1
    31b0:	10c00e1e 	bne	r2,r3,31ec <memcmp+0x74>
    31b4:	21000044 	addi	r4,r4,1
    31b8:	29400044 	addi	r5,r5,1
    31bc:	31fff91e 	bne	r6,r7,31a4 <__alt_data_end+0x800031a4>
    31c0:	0005883a 	mov	r2,zero
    31c4:	f800283a 	ret
    31c8:	20c00017 	ldw	r3,0(r4)
    31cc:	28800017 	ldw	r2,0(r5)
    31d0:	18bfee1e 	bne	r3,r2,318c <__alt_data_end+0x8000318c>
    31d4:	31bfff04 	addi	r6,r6,-4
    31d8:	21000104 	addi	r4,r4,4
    31dc:	29400104 	addi	r5,r5,4
    31e0:	39bff936 	bltu	r7,r6,31c8 <__alt_data_end+0x800031c8>
    31e4:	303fe91e 	bne	r6,zero,318c <__alt_data_end+0x8000318c>
    31e8:	003ff506 	br	31c0 <__alt_data_end+0x800031c0>
    31ec:	10c5c83a 	sub	r2,r2,r3
    31f0:	f800283a 	ret

000031f4 <memcpy>:
    31f4:	defffd04 	addi	sp,sp,-12
    31f8:	dfc00215 	stw	ra,8(sp)
    31fc:	dc400115 	stw	r17,4(sp)
    3200:	dc000015 	stw	r16,0(sp)
    3204:	00c003c4 	movi	r3,15
    3208:	2005883a 	mov	r2,r4
    320c:	1980452e 	bgeu	r3,r6,3324 <memcpy+0x130>
    3210:	2906b03a 	or	r3,r5,r4
    3214:	18c000cc 	andi	r3,r3,3
    3218:	1800441e 	bne	r3,zero,332c <memcpy+0x138>
    321c:	347ffc04 	addi	r17,r6,-16
    3220:	8822d13a 	srli	r17,r17,4
    3224:	28c00104 	addi	r3,r5,4
    3228:	23400104 	addi	r13,r4,4
    322c:	8820913a 	slli	r16,r17,4
    3230:	2b000204 	addi	r12,r5,8
    3234:	22c00204 	addi	r11,r4,8
    3238:	84000504 	addi	r16,r16,20
    323c:	2a800304 	addi	r10,r5,12
    3240:	22400304 	addi	r9,r4,12
    3244:	2c21883a 	add	r16,r5,r16
    3248:	2811883a 	mov	r8,r5
    324c:	200f883a 	mov	r7,r4
    3250:	41000017 	ldw	r4,0(r8)
    3254:	1fc00017 	ldw	ra,0(r3)
    3258:	63c00017 	ldw	r15,0(r12)
    325c:	39000015 	stw	r4,0(r7)
    3260:	53800017 	ldw	r14,0(r10)
    3264:	6fc00015 	stw	ra,0(r13)
    3268:	5bc00015 	stw	r15,0(r11)
    326c:	4b800015 	stw	r14,0(r9)
    3270:	18c00404 	addi	r3,r3,16
    3274:	39c00404 	addi	r7,r7,16
    3278:	42000404 	addi	r8,r8,16
    327c:	6b400404 	addi	r13,r13,16
    3280:	63000404 	addi	r12,r12,16
    3284:	5ac00404 	addi	r11,r11,16
    3288:	52800404 	addi	r10,r10,16
    328c:	4a400404 	addi	r9,r9,16
    3290:	1c3fef1e 	bne	r3,r16,3250 <__alt_data_end+0x80003250>
    3294:	89c00044 	addi	r7,r17,1
    3298:	380e913a 	slli	r7,r7,4
    329c:	310003cc 	andi	r4,r6,15
    32a0:	02c000c4 	movi	r11,3
    32a4:	11c7883a 	add	r3,r2,r7
    32a8:	29cb883a 	add	r5,r5,r7
    32ac:	5900212e 	bgeu	r11,r4,3334 <memcpy+0x140>
    32b0:	1813883a 	mov	r9,r3
    32b4:	2811883a 	mov	r8,r5
    32b8:	200f883a 	mov	r7,r4
    32bc:	42800017 	ldw	r10,0(r8)
    32c0:	4a400104 	addi	r9,r9,4
    32c4:	39ffff04 	addi	r7,r7,-4
    32c8:	4abfff15 	stw	r10,-4(r9)
    32cc:	42000104 	addi	r8,r8,4
    32d0:	59fffa36 	bltu	r11,r7,32bc <__alt_data_end+0x800032bc>
    32d4:	213fff04 	addi	r4,r4,-4
    32d8:	2008d0ba 	srli	r4,r4,2
    32dc:	318000cc 	andi	r6,r6,3
    32e0:	21000044 	addi	r4,r4,1
    32e4:	2109883a 	add	r4,r4,r4
    32e8:	2109883a 	add	r4,r4,r4
    32ec:	1907883a 	add	r3,r3,r4
    32f0:	290b883a 	add	r5,r5,r4
    32f4:	30000626 	beq	r6,zero,3310 <memcpy+0x11c>
    32f8:	198d883a 	add	r6,r3,r6
    32fc:	29c00003 	ldbu	r7,0(r5)
    3300:	18c00044 	addi	r3,r3,1
    3304:	29400044 	addi	r5,r5,1
    3308:	19ffffc5 	stb	r7,-1(r3)
    330c:	19bffb1e 	bne	r3,r6,32fc <__alt_data_end+0x800032fc>
    3310:	dfc00217 	ldw	ra,8(sp)
    3314:	dc400117 	ldw	r17,4(sp)
    3318:	dc000017 	ldw	r16,0(sp)
    331c:	dec00304 	addi	sp,sp,12
    3320:	f800283a 	ret
    3324:	2007883a 	mov	r3,r4
    3328:	003ff206 	br	32f4 <__alt_data_end+0x800032f4>
    332c:	2007883a 	mov	r3,r4
    3330:	003ff106 	br	32f8 <__alt_data_end+0x800032f8>
    3334:	200d883a 	mov	r6,r4
    3338:	003fee06 	br	32f4 <__alt_data_end+0x800032f4>

0000333c <strcmp>:
    333c:	2144b03a 	or	r2,r4,r5
    3340:	108000cc 	andi	r2,r2,3
    3344:	1000171e 	bne	r2,zero,33a4 <strcmp+0x68>
    3348:	20800017 	ldw	r2,0(r4)
    334c:	28c00017 	ldw	r3,0(r5)
    3350:	10c0141e 	bne	r2,r3,33a4 <strcmp+0x68>
    3354:	027fbff4 	movhi	r9,65279
    3358:	4a7fbfc4 	addi	r9,r9,-257
    335c:	0086303a 	nor	r3,zero,r2
    3360:	02202074 	movhi	r8,32897
    3364:	1245883a 	add	r2,r2,r9
    3368:	42202004 	addi	r8,r8,-32640
    336c:	10c4703a 	and	r2,r2,r3
    3370:	1204703a 	and	r2,r2,r8
    3374:	10000226 	beq	r2,zero,3380 <strcmp+0x44>
    3378:	00002306 	br	3408 <strcmp+0xcc>
    337c:	1000221e 	bne	r2,zero,3408 <strcmp+0xcc>
    3380:	21000104 	addi	r4,r4,4
    3384:	20c00017 	ldw	r3,0(r4)
    3388:	29400104 	addi	r5,r5,4
    338c:	29800017 	ldw	r6,0(r5)
    3390:	1a4f883a 	add	r7,r3,r9
    3394:	00c4303a 	nor	r2,zero,r3
    3398:	3884703a 	and	r2,r7,r2
    339c:	1204703a 	and	r2,r2,r8
    33a0:	19bff626 	beq	r3,r6,337c <__alt_data_end+0x8000337c>
    33a4:	20800003 	ldbu	r2,0(r4)
    33a8:	10c03fcc 	andi	r3,r2,255
    33ac:	18c0201c 	xori	r3,r3,128
    33b0:	18ffe004 	addi	r3,r3,-128
    33b4:	18000c26 	beq	r3,zero,33e8 <strcmp+0xac>
    33b8:	29800007 	ldb	r6,0(r5)
    33bc:	19800326 	beq	r3,r6,33cc <strcmp+0x90>
    33c0:	00001306 	br	3410 <strcmp+0xd4>
    33c4:	29800007 	ldb	r6,0(r5)
    33c8:	11800b1e 	bne	r2,r6,33f8 <strcmp+0xbc>
    33cc:	21000044 	addi	r4,r4,1
    33d0:	20c00003 	ldbu	r3,0(r4)
    33d4:	29400044 	addi	r5,r5,1
    33d8:	18803fcc 	andi	r2,r3,255
    33dc:	1080201c 	xori	r2,r2,128
    33e0:	10bfe004 	addi	r2,r2,-128
    33e4:	103ff71e 	bne	r2,zero,33c4 <__alt_data_end+0x800033c4>
    33e8:	0007883a 	mov	r3,zero
    33ec:	28800003 	ldbu	r2,0(r5)
    33f0:	1885c83a 	sub	r2,r3,r2
    33f4:	f800283a 	ret
    33f8:	28800003 	ldbu	r2,0(r5)
    33fc:	18c03fcc 	andi	r3,r3,255
    3400:	1885c83a 	sub	r2,r3,r2
    3404:	f800283a 	ret
    3408:	0005883a 	mov	r2,zero
    340c:	f800283a 	ret
    3410:	10c03fcc 	andi	r3,r2,255
    3414:	003ff506 	br	33ec <__alt_data_end+0x800033ec>

00003418 <strlen>:
    3418:	208000cc 	andi	r2,r4,3
    341c:	10002026 	beq	r2,zero,34a0 <strlen+0x88>
    3420:	20800007 	ldb	r2,0(r4)
    3424:	10002026 	beq	r2,zero,34a8 <strlen+0x90>
    3428:	2005883a 	mov	r2,r4
    342c:	00000206 	br	3438 <strlen+0x20>
    3430:	10c00007 	ldb	r3,0(r2)
    3434:	18001826 	beq	r3,zero,3498 <strlen+0x80>
    3438:	10800044 	addi	r2,r2,1
    343c:	10c000cc 	andi	r3,r2,3
    3440:	183ffb1e 	bne	r3,zero,3430 <__alt_data_end+0x80003430>
    3444:	10c00017 	ldw	r3,0(r2)
    3448:	01ffbff4 	movhi	r7,65279
    344c:	39ffbfc4 	addi	r7,r7,-257
    3450:	00ca303a 	nor	r5,zero,r3
    3454:	01a02074 	movhi	r6,32897
    3458:	19c7883a 	add	r3,r3,r7
    345c:	31a02004 	addi	r6,r6,-32640
    3460:	1946703a 	and	r3,r3,r5
    3464:	1986703a 	and	r3,r3,r6
    3468:	1800091e 	bne	r3,zero,3490 <strlen+0x78>
    346c:	10800104 	addi	r2,r2,4
    3470:	10c00017 	ldw	r3,0(r2)
    3474:	19cb883a 	add	r5,r3,r7
    3478:	00c6303a 	nor	r3,zero,r3
    347c:	28c6703a 	and	r3,r5,r3
    3480:	1986703a 	and	r3,r3,r6
    3484:	183ff926 	beq	r3,zero,346c <__alt_data_end+0x8000346c>
    3488:	00000106 	br	3490 <strlen+0x78>
    348c:	10800044 	addi	r2,r2,1
    3490:	10c00007 	ldb	r3,0(r2)
    3494:	183ffd1e 	bne	r3,zero,348c <__alt_data_end+0x8000348c>
    3498:	1105c83a 	sub	r2,r2,r4
    349c:	f800283a 	ret
    34a0:	2005883a 	mov	r2,r4
    34a4:	003fe706 	br	3444 <__alt_data_end+0x80003444>
    34a8:	0005883a 	mov	r2,zero
    34ac:	f800283a 	ret

000034b0 <__register_exitproc>:
    34b0:	defffa04 	addi	sp,sp,-24
    34b4:	dc000315 	stw	r16,12(sp)
    34b8:	04100034 	movhi	r16,16384
    34bc:	84064e04 	addi	r16,r16,6456
    34c0:	80c00017 	ldw	r3,0(r16)
    34c4:	dc400415 	stw	r17,16(sp)
    34c8:	dfc00515 	stw	ra,20(sp)
    34cc:	18805217 	ldw	r2,328(r3)
    34d0:	2023883a 	mov	r17,r4
    34d4:	10003726 	beq	r2,zero,35b4 <__register_exitproc+0x104>
    34d8:	10c00117 	ldw	r3,4(r2)
    34dc:	010007c4 	movi	r4,31
    34e0:	20c00e16 	blt	r4,r3,351c <__register_exitproc+0x6c>
    34e4:	1a000044 	addi	r8,r3,1
    34e8:	8800221e 	bne	r17,zero,3574 <__register_exitproc+0xc4>
    34ec:	18c00084 	addi	r3,r3,2
    34f0:	18c7883a 	add	r3,r3,r3
    34f4:	18c7883a 	add	r3,r3,r3
    34f8:	12000115 	stw	r8,4(r2)
    34fc:	10c7883a 	add	r3,r2,r3
    3500:	19400015 	stw	r5,0(r3)
    3504:	0005883a 	mov	r2,zero
    3508:	dfc00517 	ldw	ra,20(sp)
    350c:	dc400417 	ldw	r17,16(sp)
    3510:	dc000317 	ldw	r16,12(sp)
    3514:	dec00604 	addi	sp,sp,24
    3518:	f800283a 	ret
    351c:	00800034 	movhi	r2,0
    3520:	10800004 	addi	r2,r2,0
    3524:	10002626 	beq	r2,zero,35c0 <__register_exitproc+0x110>
    3528:	01006404 	movi	r4,400
    352c:	d9400015 	stw	r5,0(sp)
    3530:	d9800115 	stw	r6,4(sp)
    3534:	d9c00215 	stw	r7,8(sp)
    3538:	00000000 	call	0 <__alt_mem_SDRAM>
    353c:	d9400017 	ldw	r5,0(sp)
    3540:	d9800117 	ldw	r6,4(sp)
    3544:	d9c00217 	ldw	r7,8(sp)
    3548:	10001d26 	beq	r2,zero,35c0 <__register_exitproc+0x110>
    354c:	81000017 	ldw	r4,0(r16)
    3550:	10000115 	stw	zero,4(r2)
    3554:	02000044 	movi	r8,1
    3558:	22405217 	ldw	r9,328(r4)
    355c:	0007883a 	mov	r3,zero
    3560:	12400015 	stw	r9,0(r2)
    3564:	20805215 	stw	r2,328(r4)
    3568:	10006215 	stw	zero,392(r2)
    356c:	10006315 	stw	zero,396(r2)
    3570:	883fde26 	beq	r17,zero,34ec <__alt_data_end+0x800034ec>
    3574:	18c9883a 	add	r4,r3,r3
    3578:	2109883a 	add	r4,r4,r4
    357c:	1109883a 	add	r4,r2,r4
    3580:	21802215 	stw	r6,136(r4)
    3584:	01800044 	movi	r6,1
    3588:	12406217 	ldw	r9,392(r2)
    358c:	30cc983a 	sll	r6,r6,r3
    3590:	4992b03a 	or	r9,r9,r6
    3594:	12406215 	stw	r9,392(r2)
    3598:	21c04215 	stw	r7,264(r4)
    359c:	01000084 	movi	r4,2
    35a0:	893fd21e 	bne	r17,r4,34ec <__alt_data_end+0x800034ec>
    35a4:	11006317 	ldw	r4,396(r2)
    35a8:	218cb03a 	or	r6,r4,r6
    35ac:	11806315 	stw	r6,396(r2)
    35b0:	003fce06 	br	34ec <__alt_data_end+0x800034ec>
    35b4:	18805304 	addi	r2,r3,332
    35b8:	18805215 	stw	r2,328(r3)
    35bc:	003fc606 	br	34d8 <__alt_data_end+0x800034d8>
    35c0:	00bfffc4 	movi	r2,-1
    35c4:	003fd006 	br	3508 <__alt_data_end+0x80003508>

000035c8 <__call_exitprocs>:
    35c8:	defff504 	addi	sp,sp,-44
    35cc:	df000915 	stw	fp,36(sp)
    35d0:	dd400615 	stw	r21,24(sp)
    35d4:	dc800315 	stw	r18,12(sp)
    35d8:	dfc00a15 	stw	ra,40(sp)
    35dc:	ddc00815 	stw	r23,32(sp)
    35e0:	dd800715 	stw	r22,28(sp)
    35e4:	dd000515 	stw	r20,20(sp)
    35e8:	dcc00415 	stw	r19,16(sp)
    35ec:	dc400215 	stw	r17,8(sp)
    35f0:	dc000115 	stw	r16,4(sp)
    35f4:	d9000015 	stw	r4,0(sp)
    35f8:	2839883a 	mov	fp,r5
    35fc:	04800044 	movi	r18,1
    3600:	057fffc4 	movi	r21,-1
    3604:	00900034 	movhi	r2,16384
    3608:	10864e04 	addi	r2,r2,6456
    360c:	12000017 	ldw	r8,0(r2)
    3610:	45005217 	ldw	r20,328(r8)
    3614:	44c05204 	addi	r19,r8,328
    3618:	a0001c26 	beq	r20,zero,368c <__call_exitprocs+0xc4>
    361c:	a0800117 	ldw	r2,4(r20)
    3620:	15ffffc4 	addi	r23,r2,-1
    3624:	b8000d16 	blt	r23,zero,365c <__call_exitprocs+0x94>
    3628:	14000044 	addi	r16,r2,1
    362c:	8421883a 	add	r16,r16,r16
    3630:	8421883a 	add	r16,r16,r16
    3634:	84402004 	addi	r17,r16,128
    3638:	a463883a 	add	r17,r20,r17
    363c:	a421883a 	add	r16,r20,r16
    3640:	e0001e26 	beq	fp,zero,36bc <__call_exitprocs+0xf4>
    3644:	80804017 	ldw	r2,256(r16)
    3648:	e0801c26 	beq	fp,r2,36bc <__call_exitprocs+0xf4>
    364c:	bdffffc4 	addi	r23,r23,-1
    3650:	843fff04 	addi	r16,r16,-4
    3654:	8c7fff04 	addi	r17,r17,-4
    3658:	bd7ff91e 	bne	r23,r21,3640 <__alt_data_end+0x80003640>
    365c:	00800034 	movhi	r2,0
    3660:	10800004 	addi	r2,r2,0
    3664:	10000926 	beq	r2,zero,368c <__call_exitprocs+0xc4>
    3668:	a0800117 	ldw	r2,4(r20)
    366c:	1000301e 	bne	r2,zero,3730 <__call_exitprocs+0x168>
    3670:	a0800017 	ldw	r2,0(r20)
    3674:	10003226 	beq	r2,zero,3740 <__call_exitprocs+0x178>
    3678:	a009883a 	mov	r4,r20
    367c:	98800015 	stw	r2,0(r19)
    3680:	00000000 	call	0 <__alt_mem_SDRAM>
    3684:	9d000017 	ldw	r20,0(r19)
    3688:	a03fe41e 	bne	r20,zero,361c <__alt_data_end+0x8000361c>
    368c:	dfc00a17 	ldw	ra,40(sp)
    3690:	df000917 	ldw	fp,36(sp)
    3694:	ddc00817 	ldw	r23,32(sp)
    3698:	dd800717 	ldw	r22,28(sp)
    369c:	dd400617 	ldw	r21,24(sp)
    36a0:	dd000517 	ldw	r20,20(sp)
    36a4:	dcc00417 	ldw	r19,16(sp)
    36a8:	dc800317 	ldw	r18,12(sp)
    36ac:	dc400217 	ldw	r17,8(sp)
    36b0:	dc000117 	ldw	r16,4(sp)
    36b4:	dec00b04 	addi	sp,sp,44
    36b8:	f800283a 	ret
    36bc:	a0800117 	ldw	r2,4(r20)
    36c0:	80c00017 	ldw	r3,0(r16)
    36c4:	10bfffc4 	addi	r2,r2,-1
    36c8:	15c01426 	beq	r2,r23,371c <__call_exitprocs+0x154>
    36cc:	80000015 	stw	zero,0(r16)
    36d0:	183fde26 	beq	r3,zero,364c <__alt_data_end+0x8000364c>
    36d4:	95c8983a 	sll	r4,r18,r23
    36d8:	a0806217 	ldw	r2,392(r20)
    36dc:	a5800117 	ldw	r22,4(r20)
    36e0:	2084703a 	and	r2,r4,r2
    36e4:	10000b26 	beq	r2,zero,3714 <__call_exitprocs+0x14c>
    36e8:	a0806317 	ldw	r2,396(r20)
    36ec:	2088703a 	and	r4,r4,r2
    36f0:	20000c1e 	bne	r4,zero,3724 <__call_exitprocs+0x15c>
    36f4:	89400017 	ldw	r5,0(r17)
    36f8:	d9000017 	ldw	r4,0(sp)
    36fc:	183ee83a 	callr	r3
    3700:	a0800117 	ldw	r2,4(r20)
    3704:	15bfbf1e 	bne	r2,r22,3604 <__alt_data_end+0x80003604>
    3708:	98800017 	ldw	r2,0(r19)
    370c:	153fcf26 	beq	r2,r20,364c <__alt_data_end+0x8000364c>
    3710:	003fbc06 	br	3604 <__alt_data_end+0x80003604>
    3714:	183ee83a 	callr	r3
    3718:	003ff906 	br	3700 <__alt_data_end+0x80003700>
    371c:	a5c00115 	stw	r23,4(r20)
    3720:	003feb06 	br	36d0 <__alt_data_end+0x800036d0>
    3724:	89000017 	ldw	r4,0(r17)
    3728:	183ee83a 	callr	r3
    372c:	003ff406 	br	3700 <__alt_data_end+0x80003700>
    3730:	a0800017 	ldw	r2,0(r20)
    3734:	a027883a 	mov	r19,r20
    3738:	1029883a 	mov	r20,r2
    373c:	003fb606 	br	3618 <__alt_data_end+0x80003618>
    3740:	0005883a 	mov	r2,zero
    3744:	003ffb06 	br	3734 <__alt_data_end+0x80003734>

00003748 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    3748:	defffd04 	addi	sp,sp,-12
    374c:	df000215 	stw	fp,8(sp)
    3750:	df000204 	addi	fp,sp,8
    3754:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    3758:	0001883a 	nop
    375c:	e0bfff17 	ldw	r2,-4(fp)
    3760:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    3764:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3768:	10000226 	beq	r2,zero,3774 <_exit+0x2c>
    ALT_SIM_FAIL();
    376c:	002af070 	cmpltui	zero,zero,43969
    3770:	00000106 	br	3778 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    3774:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3778:	003fff06 	br	3778 <__alt_data_end+0x80003778>
